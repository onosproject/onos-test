#!/bin/bash
# SPDX-FileCopyrightText: 2020-present Open Networking Foundation <info@opennetworking.org>
#
# SPDX-License-Identifier: Apache-2.0

# Script to do a dry run build of all the micro onos components


set -e -u -o pipefail

WORKSPACE=${WORKSPACE:-/tmp}
ARCHIVE="$WORKSPACE/published-logs"

# repos and targets to build
declare -a components=(
  "onos-api" "protos"
  "onos-helm-charts" "deps"
  "sdran-helm-charts" "deps"
  "build-tools" "images"
  "config-models" "jenkins-test"
  "gnxi-simulators" "images"
  "helmit" "build"
  "onos-a1t" "images"
  "onos-cli" "images"
  "onos-config" "images"
  "onos-docs" "images"
#  "onos-e2-sm" "images"
  "onos-e2t" "images"
  "onos-exporter" "images"
  "onos-kpimon" "images"
  "onos-lib-go" "build"
  "onos-mho" "images"
  "onos-mlb" "images"
  "onos-operator" "images"
  "onos-pci" "images"
  "onos-proxy" "images"
  "onos-ric-sdk-go" "all"
  "onos-rsm" "images"
  "onos-topo" "images"
  "onos-uenib" "images"
  "ran-simulator" "images"
)

length=${#components[@]}
length=$((length - 1))

rm -rf ./build-work-space
mkdir ./build-work-space
cd ./build-work-space

# pull and build master branches of included components
for i in $(seq 0 2 $length); do
  component="${components[$i]}"
  target="${components[$i+1]}"

  echo "Cloning ${component}"
  git clone "git@github.com:onosproject/${component}.git" --quiet
  cd "${component}"
  make "${target}"
  cd ..
done

# onos-gui - needs a special image to build
git clone git@github.com:onosproject/onos-gui.git --quiet
cd ./onos-gui
make license
docker pull mirror.registry.opennetworking.org/teracy/angular-cli
docker container run --rm -v "$(pwd):/opt" -w /opt teracy/angular-cli make deps build
cd ..

# Save the image listing as an artifact
rm -rf "$ARCHIVE"
mkdir -p "$ARCHIVE"
docker image ls >"$ARCHIVE/all-images.log"

echo "=== Master build test completed successfully!"
