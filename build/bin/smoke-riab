#!/bin/bash
# Copyright 2020-present Open Networking Foundation.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#
# This is a smoke test for the Ran in a box (RiaB) sdran configuration using KinD. It is intended to be
# run in a directory where the onosproject/sdran-in-a-box repo has been pulled.
#
# The script pulls the helm charts for Aether and SD-RAN from their source code repos on gerrit and github
# respectively. You must set up an HTTP password on gerrit and pass it in the the script, as well as have an
# ssh key already set up to access the private sdran repos on github.

function post_test_clean {
    make clean-all >/dev/null 2>/dev/null
    sudo systemctl restart docker
}

set -e -u -o pipefail
onos_test=$PWD

# post test job
trap "$onos_test/build/bin/setup-artifacts && $onos_test/build/bin/archive-artifacts && post_test_clean" EXIT

# set a default workspace if not running on Jenkins
WORKSPACE=${WORKSPACE:-~}

# in case there is a left over KinD cluster, delete it
kind delete cluster

# import sdran chart repo credentials
export SDRAN_USERNAME=$repo_user
export SDRAN_PASSWORD=$repo_password

# clone the RIAB sources
rm -rf riab-workspace && mkdir riab-workspace
pushd riab-workspace
git clone git@github.com:onosproject/sdran-in-a-box.git

# directory to hold the downloaded charts
rm -rf ${WORKSPACE}/helm-charts
mkdir ${WORKSPACE}/helm-charts
pushd ${WORKSPACE}/helm-charts

# pull down the chart repos

# aether charts
git clone ssh://jenkins@gerrit.opencord.org:29418/aether-helm-charts

# onos sdran charts
git clone git@github.com:onosproject/sdran-helm-charts.git

popd

# clean up from any previous runs
cd sdran-in-a-box
make infra-kubespray
make clean

# Force images to be downloaded
docker rmi --force $(docker images -a -q) || true

# override defaults for RIAB versions
git checkout sdran-in-a-box*.yaml

sed -i -e "s#spgwc: docker.io/onosproject/riab-spgw:master-d8b0987#spgwc: docker.io/onosproject/riab-spgw:master-d8b0987-onfvm-1#" sdran-in-a-box-values-master-stable.yaml
sed -i -e "s#bess: docker.io/onosproject/riab-bess-upf:master-635b4d4#bess: docker.io/onosproject/riab-bess-upf:master-635b4d4-onfvm-1#" sdran-in-a-box-values-master-stable.yaml
sed -i -e "s#pfcpiface: docker.io/onosproject/riab-pfcpiface:master-635b4d4#pfcpiface: docker.io/onosproject/riab-pfcpiface:master-635b4d4-onfvm-1#" sdran-in-a-box-values-master-stable.yaml

# restart Docker service to prevent occasional etcd installation failure
sudo systemctl restart docker || true

# Install RIAB with ransim option
echo Starting RiaB ransim option smoke test
make riab OPT=ransim
sleep 60

# make sure that RIAB is running by checking for an onos e2t connection
ITERATIONS=6
RANSIM_FLAG=false
for ((i=1;i<=ITERATIONS;i++))
do
    if kubectl run cli-check-connections -n riab --rm -i --image onosproject/onos-cli:latest --restart Never --command /usr/local/bin/onos e2t list connections | grep --text G_NB
    then
        echo '***' RiaB ransim option smoke test passed! '***'
        RANSIM_FLAG=true
        break
    fi
    sleep 10
done

if [ $RANSIM_FLAG == "false" ]
then
    echo '***' No G_NB connection found. RiaB ransim option smoke test failed! '***'
    $onos_test/build/bin/archive-artifacts
    exit 1
fi

# reset ric
make reset-ric
sleep 60

# Check whether all pods down
kubectl get po --all-namespaces

# delete and recreate riab namespace
kubectl delete namespace riab
kubectl create namespace riab

# Install RiaB with OAI option
echo Starting RiaB oai option smoke test
make riab OPT=oai
sleep 60

# make sure that RIAB is running by checking for an onos e2t connection
ITERATIONS=6
OAI_RIC_FLAG=false
OAI_PING_ROUTER_FLAG=false
OAI_PING_INTERNET_FLAG=false
OAI_PING_DNS_FLAG=false
for ((i=1;i<=ITERATIONS;i++))
do
    if kubectl run cli-check-connections -n riab --rm -i --image onosproject/onos-cli:latest --restart Never --command /usr/local/bin/onos e2t list connections | grep --text E_NB
    then
        echo [RiaB OAI smoke test] RIC Control plane is working!
        OAI_RIC_FLAG=true
        break
    fi
    sleep 10
done

for ((i=1;i<=ITERATIONS;i++))
do
    if ping -c 1 -n -w 1 192.168.250.1 -I oaitun_ue1
    then
        echo [RiaB OAI smoke test] Internal user plane connectivity looks good!
        OAI_PING_ROUTER_FLAG=true
        break
    fi
    sleep 10
done

for ((i=1;i<=ITERATIONS;i++))
do
    if ping -c 1 -n -w 1 8.8.8.8 -I oaitun_ue1
    then
        echo [RiaB OAI smoke test] Internet connectivity looks good!
        OAI_PING_INTERNET_FLAG=true
        break
    fi
    sleep 10
done

for ((i=1;i<=ITERATIONS;i++))
do
    if ping -c 1 -n -w 1 google.com -I oaitun_ue1
    then
        echo [RiaB OAI smoke test] Domain name can be resolved!
        OAI_PING_DNS_FLAG=true
        break
    fi
    sleep 10
done

if [ $OAI_RIC_FLAG == "true" ] && [ $OAI_PING_ROUTER_FLAG == "true" ] && [ $OAI_PING_INTERNET_FLAG == "true" ] && [ $OAI_PING_DNS_FLAG == "true" ]
then
    echo '***' RiaB OAI option smoke test passed! '***'
    exit 0
fi

echo '***' No E_NB connection found. RiaB oai option smoke test failed! '***'
echo OAI_RIC_FLAG: $OAI_RIC_FLAG
echo OAI_PING_ROUTER_FLAG: $OAI_PING_ROUTER_FLAG
echo OAI_PING_INTERNET_FLAG: $OAI_PING_INTERNET_FLAG
echo OAI_PING_DNS_FLAG: $OAI_PING_DNS_FLAG
exit 1
