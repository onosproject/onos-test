#!/bin/bash
# Copyright 2020-present Open Networking Foundation.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#
# This is a smoke test for the Ran in a box (RiaB) sdran configuration using KinD. It is intended to be
# run in a directory where the onosproject/sdran-in-a-box repo has been pulled.
#
# The script pulls the helm charts for Aether and SD-RAN from their source code repos on gerrit and github
# respectively. You must set up an HTTP password on gerrit and pass it in the the script, as well as have an
# ssh key already set up to access the private sdran repos on github.

function post_test_clean {
    make clean-all >/dev/null 2>/dev/null
    sudo systemctl restart docker
}

function iperf_test {
  echo check default slice performance - tcp
  iperf -s -B $(ip a show oaitun_ue1 | grep inet | grep -v inet6 | awk '{print $2}' | awk -F '/' '{print $1}') -p 5001 &
  kubectl exec -it router -- iperf -c $(ip a show oaitun_ue1 | grep inet | grep -v inet6 | awk '{print $2}' | awk -F '/' '{print $1}') -p 5001 > tcp_$1
  sudo pkill -9 -ef iperf || true
  sleep 5

# Will uncomment below
#   echo check default slice performance - udp
#   iperf -s -u -B $(ip a show oaitun_ue1 | grep inet | grep -v inet6 | awk '{print $2}' | awk -F '/' '{print $1}') -p 5001 &
#   kubectl exec -it router -- iperf -c $(ip a show oaitun_ue1 | grep inet | grep -v inet6 | awk '{print $2}' | awk -F '/' '{print $1}') -u -p 5001 -b18m > udp_$1
#   sudo pkill -9 -ef iperf || true
#   sleep 5
}

set -e -u -o pipefail
onos_test=$PWD

# post test job
trap "$onos_test/build/bin/setup-artifacts && $onos_test/build/bin/archive-artifacts && post_test_clean" EXIT

# set a default workspace if not running on Jenkins
WORKSPACE=${WORKSPACE:-~}

# command to access the ONOS CLI
export cli_command="kubectl -n riab exec -t deploy/onos-cli -- "

# in case there is a left over KinD cluster, delete it
kind delete cluster

# import sdran chart repo credentials
export SDRAN_USERNAME=$repo_user
export SDRAN_PASSWORD=$repo_password

# clone the RIAB sources
rm -rf riab-workspace && mkdir riab-workspace
pushd riab-workspace
git clone git@github.com:onosproject/sdran-in-a-box.git

# directory to hold the downloaded charts
rm -rf ${WORKSPACE}/helm-charts
mkdir ${WORKSPACE}/helm-charts
pushd ${WORKSPACE}/helm-charts

# pull down the chart repos

# aether charts
git clone ssh://jenkins@gerrit.opencord.org:29418/aether-helm-charts

# onos sdran charts
git clone git@github.com:onosproject/sdran-helm-charts.git

popd

# clean up from any previous runs
cd sdran-in-a-box
make infra-kubespray
make clean

# Force images to be downloaded
docker rmi --force $(docker images -a -q) || true

# override defaults for RIAB versions
git checkout sdran-in-a-box*.yaml

sed -i -e "s#spgwc: docker.io/onosproject/riab-spgw:master-d8b0987#spgwc: docker.io/onosproject/riab-spgw:master-d8b0987-onfvm-1#" sdran-in-a-box-values-master-stable.yaml
sed -i -e "s#bess: docker.io/onosproject/riab-bess-upf:master-635b4d4#bess: docker.io/onosproject/riab-bess-upf:master-635b4d4-onfvm-1#" sdran-in-a-box-values-master-stable.yaml
sed -i -e "s#pfcpiface: docker.io/onosproject/riab-pfcpiface:master-635b4d4#pfcpiface: docker.io/onosproject/riab-pfcpiface:master-635b4d4-onfvm-1#" sdran-in-a-box-values-master-stable.yaml

# restart Docker service to prevent occasional etcd installation failure
sudo systemctl restart docker || true

# Install RIAB with ransim option
echo Starting RiaB ransim option smoke test
make riab OPT=ransim
sleep 60

# make sure that RIAB is running by checking for an onos e2t connection
ITERATIONS=6
RANSIM_FLAG=false
for ((i=1;i<=ITERATIONS;i++))
do
    if $cli_command onos topo get relations --kind controls | grep --text e2:1
    then
        echo '***' RiaB ransim option smoke test passed! '***'
        RANSIM_FLAG=true
        break
    fi
    sleep 10
done

if [ $RANSIM_FLAG == "false" ]
then
    echo '***' No G_NB connection found. RiaB ransim option smoke test failed! '***'
    $onos_test/build/bin/archive-artifacts
    exit 1
fi

# reset ric
make reset-ric
sleep 60

# Check whether all pods down
kubectl get po --all-namespaces

# delete and recreate riab namespace
kubectl delete namespace riab
kubectl create namespace riab

# Install RiaB with OAI option
echo Starting RiaB oai option smoke test
make riab OPT=oai
sleep 60

# make sure that RIAB is running by checking for an onos e2t connection
ITERATIONS=6
OAI_RIC_FLAG=false
OAI_PING_ROUTER_FLAG=false
OAI_PING_INTERNET_FLAG=false
OAI_PING_DNS_FLAG=false
for ((i=1;i<=ITERATIONS;i++))
do
    if $cli_command onos topo get relations --kind controls | grep --text e2:1
    then
        echo [RiaB OAI smoke test] RIC Control plane is working!
        OAI_RIC_FLAG=true
        break
    fi
    sleep 10
done

# For now, the OAI test can't generate connections - disable the check
OAI_RIC_FLAG=true

for ((i=1;i<=ITERATIONS;i++))
do
    if ping -c 1 -n -w 1 192.168.250.1 -I oaitun_ue1
    then
        echo [RiaB OAI smoke test] Internal user plane connectivity looks good!
        OAI_PING_ROUTER_FLAG=true
        break
    fi
    sleep 10
done

for ((i=1;i<=ITERATIONS;i++))
do
    if ping -c 1 -n -w 1 8.8.8.8 -I oaitun_ue1
    then
        echo [RiaB OAI smoke test] Internet connectivity looks good!
        OAI_PING_INTERNET_FLAG=true
        break
    fi
    sleep 10
done

for ((i=1;i<=ITERATIONS;i++))
do
    if ping -c 1 -n -w 1 google.com -I oaitun_ue1
    then
        echo [RiaB OAI smoke test] Domain name can be resolved!
        OAI_PING_DNS_FLAG=true
        break
    fi
    sleep 10
done

if [ $OAI_RIC_FLAG == "false" ] || [ $OAI_PING_ROUTER_FLAG == "false" ] || [ $OAI_PING_INTERNET_FLAG == "false" ] || [ $OAI_PING_DNS_FLAG == "false" ]
then
    echo '***' RiaB oai option smoke test failed! '***'
    exit 1
fi

echo '***' RiaB OAI KPIMON and user plane tests passed '***'

echo '***' Starting RiaB oai option RSM use-case test '***'

kubectl get po -n riab

echo check R-NIB whether CU and DU are registered
kubectl exec -it deployment/onos-cli -n riab -- onos topo get entity -v
NUMNODES=$(kubectl exec -it deployment/onos-cli -n riab -- onos topo get entity -v | grep e2:4/e00 | wc -l)
if [ $NUMNODES != 3 ]
then
    echo CU or DU does not exist - RiaB OAI option RSM use-case test failed
    exit 1
fi

echo check UE-NIB whether one UE is registered
kubectl exec -it deployment/onos-cli -n riab -- onos uenib get ues -v
NUMUES=$(kubectl exec -it deployment/onos-cli -n riab -- onos uenib get ues --no-headers | wc -l)
if [ $NUMUES != 1 ]
then
    echo The number of UEs should be one - RiaB OAI option RSM use-case test failed
    exit 1
fi
UENIB_INFO=$(kubectl exec -it deployment/onos-cli -n riab -- onos uenib get ues -v | grep RsmUeInfo | awk -F '=' '{print $2}')
DU_UE_F1AP_ID=$(echo $UENIB_INFO | jq '.ueIdList.duUeF1apId.value' | sed "s/\"//g")

echo install iperf
sudo apt install -y iperf
kubectl exec -it router -- apt install -y iperf

iperf_test "default_1.txt"

echo create slice
kubectl exec -it deployment/onos-cli -n riab -- onos rsm create slice --e2NodeID e2:4/e00/3/c8 --scheduler RR --sliceID 1 --weight 30 --sliceType DL

echo check R-NIB whether slice is created
kubectl exec -it deployment/onos-cli -n riab -- onos topo get entity e2:4/e00/3/c8 -v
SLICE_ITEM=$(kubectl exec -it deployment/onos-cli -n riab -- onos topo get entity e2:4/e00/3/c8 -v  | grep RSMSliceItemList | awk -F '=' '{print $2}')
if [ $(echo $SLICE_ITEM | jq .[] | jq length) != 1 ]
then
    echo ONOS-TOPO does not have added slice - RiaB OAI option RSM use-case test failed
    exit 1
fi
if [ $(echo $SLICE_ITEM | jq '.[][0].sliceParameters.weight') != 30 ]
then
    echo Wrong weight value - RiaB OAI option RSM use-case test failed
    exit 1
fi
if [ $(echo $SLICE_ITEM | jq '.[][0].id' | sed "s/\"//g") != 1 ]
then
    echo Wrong slice ID - RiaB OAI option RSM use-case test failed
    exit 1
fi

echo associate UE with slice - we should check DuUeF1apID in UE-NIB
kubectl exec -it deployment/onos-cli -n riab -- onos rsm set association --dlSliceID 1 --e2NodeID e2:4/e00/3/c8 --drbID 5 --DuUeF1apID $DU_UE_F1AP_ID

echo check R-NIB whether UE-Slice association is created
kubectl exec -it deployment/onos-cli -n riab -- onos topo get entity e2:4/e00/3/c8 -v
SLICE_ITEM=$(kubectl exec -it deployment/onos-cli -n riab -- onos topo get entity e2:4/e00/3/c8 -v  | grep RSMSliceItemList | awk -F '=' '{print $2}')
if [ $(echo $SLICE_ITEM | jq .[] | jq length) != 1 ]
then
    echo ONOS-TOPO does not have added slice - RiaB OAI option RSM use-case test failed
    exit 1
fi
if [ $(echo $SLICE_ITEM | jq '.[][0].sliceParameters.weight') != 30 ]
then
    echo Wrong weight value - RiaB OAI option RSM use-case test failed
    exit 1
fi
if [ $(echo $SLICE_ITEM | jq '.[][0].id' | sed "s/\"//g") != 1 ]
then
    echo Wrong slice ID - RiaB OAI option RSM use-case test failed
    exit 1
fi
if [ $(echo $SLICE_ITEM | jq '.[][0].ueIdList' | jq length) != 1 ]
then
    echo UE is not associated correctly - RiaB OAI option RSM use-case test failed
    exit 1
fi
if [ $(echo $SLICE_ITEM | jq '.[][0].ueIdList[0].duUeF1apId.value' | sed "s/\"//g") != $DU_UE_F1AP_ID ]
then
    echo Wrong UE ID in R-NIB - RiaB OAI option RSM use-case test failed
    exit 1
fi

echo check UE-NIB whether UE-Slice association is created
kubectl exec -it deployment/onos-cli -n riab -- onos uenib get ues -v
UENIB_INFO=$(kubectl exec -it deployment/onos-cli -n riab -- onos uenib get ues -v | grep RsmUeInfo | awk -F '=' '{print $2}')
if [ $(echo $UENIB_INFO | jq '.sliceList' | jq length ) != 1 ]
then
    echo the number of slice is not 1 - RiaB OAI option RSM use-case test failed
    exit 1
fi
if [ $(echo $UENIB_INFO | jq '.sliceList[0].id' | sed "s/\"//g") != 1 ]
then
    echo slice ID in UENIB is wrong - should be 1 - RiaB OAI option RSM use-case test failed
    exit 1
fi
if [ $(echo $UENIB_INFO | jq '.sliceList[0].sliceParameters.weight' | sed "s/\"//g") != 30 ]
then
    echo weight is wrong - should be 30 - RiaB OAI option RSM use-case test failed
    exit 1
fi

iperf_test "s1_w30.txt"

echo update slice
kubectl exec -it deployment/onos-cli -n riab -- onos rsm update slice --e2NodeID e2:4/e00/3/c8 --scheduler RR --sliceID 1 --weight 50 --sliceType DL

echo check R-NIB whether slice is updated
kubectl exec -it deployment/onos-cli -n riab -- onos topo get entity e2:4/e00/3/c8 -v
SLICE_ITEM=$(kubectl exec -it deployment/onos-cli -n riab -- onos topo get entity e2:4/e00/3/c8 -v  | grep RSMSliceItemList | awk -F '=' '{print $2}')
if [ $(echo $SLICE_ITEM | jq .[] | jq length) != 1 ]
then
    echo ONOS-TOPO does not have added slice - RiaB OAI option RSM use-case test failed
    exit 1
fi
if [ $(echo $SLICE_ITEM | jq '.[][0].sliceParameters.weight') != 50 ]
then
    echo Wrong weight value - RiaB OAI option RSM use-case test failed
    exit 1
fi
if [ $(echo $SLICE_ITEM | jq '.[][0].id' | sed "s/\"//g") != 1 ]
then
    echo Wrong slice ID - RiaB OAI option RSM use-case test failed
    exit 1
fi
if [ $(echo $SLICE_ITEM | jq '.[][0].ueIdList' | jq length) != 1 ]
then
    echo UE is not associated correctly - RiaB OAI option RSM use-case test failed
    exit 1
fi
if [ $(echo $SLICE_ITEM | jq '.[][0].ueIdList[0].duUeF1apId.value' | sed "s/\"//g") != $DU_UE_F1AP_ID ]
then
    echo Wrong UE ID in R-NIB - RiaB OAI option RSM use-case test failed
    exit 1
fi

echo check UE-NIB whether slice is updated
kubectl exec -it deployment/onos-cli -n riab -- onos uenib get ues -v
UENIB_INFO=$(kubectl exec -it deployment/onos-cli -n riab -- onos uenib get ues -v | grep RsmUeInfo | awk -F '=' '{print $2}')
if [ $(echo $UENIB_INFO | jq '.sliceList' | jq length ) != 1 ]
then
    echo the number of slice is not 1 - RiaB OAI option RSM use-case test failed
    exit 1
fi
if [ $(echo $UENIB_INFO | jq '.sliceList[0].id' | sed "s/\"//g") != 1 ]
then
    echo slice ID in UENIB is wrong - should be 1 - RiaB OAI option RSM use-case test failed
    exit 1
fi
if [ $(echo $UENIB_INFO | jq '.sliceList[0].sliceParameters.weight' | sed "s/\"//g") != 50 ]
then
    echo weight is wrong - should be 50 - RiaB OAI option RSM use-case test failed
    exit 1
fi

iperf_test "s1_w50.txt"

echo create another dedicated slice id 2 with weight 30
kubectl exec -it deployment/onos-cli -n riab -- onos rsm create slice --e2NodeID e2:4/e00/3/c8 --scheduler RR --sliceID 2 --weight 30 --sliceType DL

echo check R-NIB whether slice is created
kubectl exec -it deployment/onos-cli -n riab -- onos topo get entity e2:4/e00/3/c8 -v
SLICE_ITEM=$(kubectl exec -it deployment/onos-cli -n riab -- onos topo get entity e2:4/e00/3/c8 -v  | grep RSMSliceItemList | awk -F '=' '{print $2}')
if [ $(echo $SLICE_ITEM | jq .[] | jq length) != 2 ]
then
    echo ONOS-TOPO does not have added slice - RiaB OAI option RSM use-case test failed
    exit 1
fi
if [ $(echo $SLICE_ITEM | jq '.[][0].sliceParameters.weight') != 50 ]
then
    echo Wrong weight value - RiaB OAI option RSM use-case test failed
    exit 1
fi
if [ $(echo $SLICE_ITEM | jq '.[][0].id' | sed "s/\"//g") != 1 ]
then
    echo Wrong slice ID - RiaB OAI option RSM use-case test failed
    exit 1
fi
if [ $(echo $SLICE_ITEM | jq '.[][0].ueIdList' | jq length) != 1 ]
then
    echo UE is not associated correctly - RiaB OAI option RSM use-case test failed
    exit 1
fi
if [ $(echo $SLICE_ITEM | jq '.[][0].ueIdList[0].duUeF1apId.value' | sed "s/\"//g") != $DU_UE_F1AP_ID ]
then
    echo Wrong UE ID in R-NIB - RiaB OAI option RSM use-case test failed
    exit 1
fi
if [ $(echo $SLICE_ITEM | jq '.[][1].sliceParameters.weight') != 30 ]
then
    echo Wrong weight value - RiaB OAI option RSM use-case test failed
    exit 1
fi
if [ $(echo $SLICE_ITEM | jq '.[][1].id' | sed "s/\"//g") != 2 ]
then
    echo Wrong slice ID - RiaB OAI option RSM use-case test failed
    exit 1
fi
if [ $(echo $SLICE_ITEM | jq '.[][1].ueIdList' | jq length) != 0 ]
then
    echo UE is not associated correctly - RiaB OAI option RSM use-case test failed
    exit 1
fi

echo switch UE from dedicated slice 1 to dedicated slice 2
kubectl exec -it deployment/onos-cli -n riab -- onos rsm set association --dlSliceID 2 --e2NodeID e2:4/e00/3/c8 --drbID 5 --DuUeF1apID $DU_UE_F1AP_ID

echo check R-NIB whether UE-Slice association is created
kubectl exec -it deployment/onos-cli -n riab -- onos topo get entity e2:4/e00/3/c8 -v
SLICE_ITEM=$(kubectl exec -it deployment/onos-cli -n riab -- onos topo get entity e2:4/e00/3/c8 -v  | grep RSMSliceItemList | awk -F '=' '{print $2}')
if [ $(echo $SLICE_ITEM | jq .[] | jq length) != 2 ]
then
    echo ONOS-TOPO does not have added slice - RiaB OAI option RSM use-case test failed
    exit 1
fi
if [ $(echo $SLICE_ITEM | jq '.[][0].sliceParameters.weight') != 50 ]
then
    echo Wrong weight value - RiaB OAI option RSM use-case test failed
    exit 1
fi
if [ $(echo $SLICE_ITEM | jq '.[][0].id' | sed "s/\"//g") != 1 ]
then
    echo Wrong slice ID - RiaB OAI option RSM use-case test failed
    exit 1
fi
if [ $(echo $SLICE_ITEM | jq '.[][0].ueIdList' | jq length) != 0 ]
then
    echo UE is not associated correctly - RiaB OAI option RSM use-case test failed
    exit 1
fi
if [ $(echo $SLICE_ITEM | jq '.[][1].sliceParameters.weight') != 30 ]
then
    echo Wrong weight value - RiaB OAI option RSM use-case test failed
    exit 1
fi
if [ $(echo $SLICE_ITEM | jq '.[][1].id' | sed "s/\"//g") != 2 ]
then
    echo Wrong slice ID - RiaB OAI option RSM use-case test failed
    exit 1
fi
if [ $(echo $SLICE_ITEM | jq '.[][1].ueIdList' | jq length) != 1 ]
then
    echo UE is not associated correctly - RiaB OAI option RSM use-case test failed
    exit 1
fi
if [ $(echo $SLICE_ITEM | jq '.[][1].ueIdList[0].duUeF1apId.value' | sed "s/\"//g") != $DU_UE_F1AP_ID ]
then
    echo Wrong UE ID in R-NIB - RiaB OAI option RSM use-case test failed
    exit 1
fi

echo check UE-NIB whether UE-Slice association is created
kubectl exec -it deployment/onos-cli -n riab -- onos uenib get ues -v
UENIB_INFO=$(kubectl exec -it deployment/onos-cli -n riab -- onos uenib get ues -v | grep RsmUeInfo | awk -F '=' '{print $2}')
if [ $(echo $UENIB_INFO | jq '.sliceList' | jq length ) != 1 ]
then
    echo the number of slice is not 1 - RiaB OAI option RSM use-case test failed
    exit 1
fi
if [ $(echo $UENIB_INFO | jq '.sliceList[0].id' | sed "s/\"//g") != 2 ]
then
    echo slice ID in UENIB is wrong - should be 1 - RiaB OAI option RSM use-case test failed
    exit 1
fi
if [ $(echo $UENIB_INFO | jq '.sliceList[0].sliceParameters.weight' | sed "s/\"//g") != 30 ]
then
    echo weight is wrong - should be 30 - RiaB OAI option RSM use-case test failed
    exit 1
fi

iperf_test "s2_w30.txt"

echo delete slice 2
sleep 10; kubectl exec -it deployment/onos-cli -n riab -- onos rsm delete slice --e2NodeID e2:4/e00/3/c8 --sliceID 2 --sliceType DL; sleep 10

#echo delete slice 1
#sleep 10; kubectl exec -it deployment/onos-cli -n riab -- onos rsm delete slice --e2NodeID e2:4/e00/3/c8 --sliceID 1 --sliceType DL; sleep 10

echo check R-NIB whether slice is deleted
kubectl exec -it deployment/onos-cli -n riab -- onos topo get entity e2:4/e00/3/c8 -v
SLICE_ITEM=$(kubectl exec -it deployment/onos-cli -n riab -- onos topo get entity e2:4/e00/3/c8 -v  | grep RSMSliceItemList | awk -F '=' '{print $2}')
if [ $(echo $SLICE_ITEM | jq .[] | jq length) != 1 ]
then
    echo the number of slice in R-NIB is not 1 - RiaB OAI option RSM use-case test failed
    exit 1
fi

echo check UE-NIB whether slice is deleted
kubectl exec -it deployment/onos-cli -n riab -- onos uenib get ues -v
UENIB_INFO=$(kubectl exec -it deployment/onos-cli -n riab -- onos uenib get ues -v | grep RsmUeInfo | awk -F '=' '{print $2}')
if [ $(echo $UENIB_INFO | jq '.sliceList' | jq length ) != 0 ]
then
    echo the number of slice in UENIB is not 0 - RiaB OAI option RSM use-case test failed
    exit 1
fi

iperf_test "default_2.txt"

echo print all TCP throughput
list=$( ls | grep  '.txt')
for i in $list
do
    echo $i
    cat $i
    echo
done

echo compare TCP throughput
TCP_DEFAULT_1=$(cat tcp_default_1.txt | grep -o -E '[0-9.]+ [M,K]bits/sec' | awk '{print $1}')
if [ -z $TCP_DEFAULT_1 ]
then
    echo no TCP_DEFAULT_1 value - RiaB OAI option RSM use-case test failed
fi

TCP_S1_W30=$(cat tcp_s1_w30.txt | grep -o -E '[0-9.]+ [M,K]bits/sec' | awk '{print $1}')
if [ -z $TCP_S1_W30 ]
then
    echo no TCP_S1_W30 value - RiaB OAI option RSM use-case test failed
fi
if [ $(echo $TCP_DEFAULT_1">"$TCP_S1_W30 | bc -l) == 0 ]
then
    echo [WARN] Default slice TCP throughput should be better than slice 1 weight 30 TCP throughput - RiaB OAI option RSM use-case test failed
fi

TCP_S1_W50=$(cat tcp_s1_w50.txt | grep -o -E '[0-9.]+ [M,K]bits/sec' | awk '{print $1}')
if [ -z $TCP_S1_W50 ]
then
    echo no TCP_S1_W50 value - RiaB OAI option RSM use-case test failed
fi
if [ $(echo $TCP_DEFAULT_1">"$TCP_S1_W50 | bc -l) == 0 ]
then
    echo [WARN] Default slice TCP throughput should be better than slice 1 weight 50 TCP throughput - RiaB OAI option RSM use-case test failed
fi
if [ $(echo $TCP_S1_W50">"$TCP_S1_W30 | bc -l) == 0 ]
then
    echo [WARN] slice 1 weight 30 TCP throughput should be better than slice 1 weight 50 TCP throughput - RiaB OAI option RSM use-case test failed
fi

TCP_S2_W30=$(cat tcp_s2_w30.txt | grep -o -E '[0-9.]+ [M,K]bits/sec' | awk '{print $1}')
if [ -z $TCP_S2_W30 ]
then
    echo no TCP_S2_W30 value - RiaB OAI option RSM use-case test failed
fi
if [ $(echo $TCP_DEFAULT_1">"$TCP_S2_W30 | bc -l) == 0 ]
then
    echo [WARN] Default slice TCP throughput should be better than slice 2 weight 30 TCP throughput - RiaB OAI option RSM use-case test failed
fi

TCP_DEFAULT_2=$(cat tcp_default_2.txt | grep -o -E '[0-9.]+ [M,K]bits/sec' | awk '{print $1}')
if [ -z $TCP_DEFAULT_2 ]
then
    echo no TCP_DEFAULT_2 value - RiaB OAI option RSM use-case test failed
fi
if [ $(echo $TCP_DEFAULT_2">"$TCP_S1_W30 | bc -l) == 0 ]
then
    echo [WARN] Default slice TCP throughput should be better than slice 1 weight 30 TCP throughput - RiaB OAI option RSM use-case test failed
fi
if [ $(echo $TCP_DEFAULT_2">"$TCP_S1_W50 | bc -l) == 0 ]
then
    echo [WARN] Default slice TCP throughput should be better than slice 1 weight 50 TCP throughput - RiaB OAI option RSM use-case test failed
fi
if [ $(echo $TCP_DEFAULT_2">"$TCP_S2_W30 | bc -l) == 0 ]
then
    echo [WARN] Default slice TCP throughput should be better than slice 2 weight 30 TCP throughput - RiaB OAI option RSM use-case test failed
fi

echo '***' RiaB oai option RSM use-case test PASSED! '***'

echo OAI_RIC_FLAG: $OAI_RIC_FLAG
echo OAI_PING_ROUTER_FLAG: $OAI_PING_ROUTER_FLAG
echo OAI_PING_INTERNET_FLAG: $OAI_PING_INTERNET_FLAG
echo OAI_PING_DNS_FLAG: $OAI_PING_DNS_FLAG
exit 0
