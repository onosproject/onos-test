#!/bin/bash
# Copyright 2020-present Open Networking Foundation.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

# This script is intended to be run from the onos-test directory as part of CI

set -eu -o pipefail
NAMESPACE=${NAMESPACE:-"micro-onos"}
START_KIND_CLUSTER=${START_KIND_CLUSTER:-"true"}
onos_operator_version=${onos_operator_version:-"latest"} # some charts need to load onos-config Models in the old format (eg: ric and e2node in sd-ran)

setup_test_cluster () {

  if [ $proxy == "" ]; then
     registry=""
  else
     registry="--set global.image.registry=$proxy"
  fi

  if [[ "${START_KIND_CLUSTER}" == "false" ]]; then
    echo -e "Not creating kind cluster as START_KIND_CLUSTER is set to ${START_KIND_CLUSTER}, cleaning namespace ${NAMESPACE}"
    kubectl delete ns $NAMESPACE || true
  else
    repo_user=${repo_user:-}
    repo_password=${repo_password:-}

    if [ -z $repo_user ]; then
      echo "repo_user must be set"
      exit 1
    fi

    if [ -z $repo_password ]; then
      echo "repo_password must be set"
      exit 1
    fi

    # Make a kind cluster
    kind delete cluster && kind create cluster --quiet

    # install the preferred versions of k8s tools
    build/bin/install-k8s-tools
  fi

  helm repo add cord https://charts.opencord.org
  helm repo add atomix https://charts.atomix.io
  helm repo add onos https://charts.onosproject.org
  helm repo add sdran --username "$repo_user" --password "$repo_password" https://sdrancharts.onosproject.org
  helm repo add aether --username "$repo_user" --password "$repo_password" https://charts.aetherproject.org
  helm repo update

  # install Atomix
  helm repo update
  if [ $proxy == "" ]; then
     kubectl create -f https://raw.githubusercontent.com/atomix/kubernetes-controller/master/deploy/atomix-controller.yaml
     kubectl create -f https://raw.githubusercontent.com/atomix/raft-storage-controller/master/deploy/raft-storage-controller.yaml
     kubectl create -f https://raw.githubusercontent.com/atomix/cache-storage-controller/master/deploy/cache-storage-controller.yaml
     registry=""
  else
     helm upgrade --install --set image.registry=$proxy \
                  --set init.image.registry=$proxy \
                  --set broker.image.registry=$proxy \
                  atomix-controller atomix/atomix-controller -n kube-system --wait
     helm upgrade --install --set image.registry=$proxy \
                  --set driver.image.registry=$proxy \
                  --set node.image.registry=$proxy \
                  atomix-raft-storage atomix/atomix-raft-storage -n kube-system --wait
     registry="--set global.image.registry=$proxy --set global.store.consensus.image.registry=$proxy --set global.storage.consensus.image=$proxy/atomix/raft-storage-node:v0.5.3"
  fi

  # initialize the operator
  if [ $proxy == "" ]; then
    if [ -z $onos_operator_version ]; then
      helm install -n kube-system onos-operator onos/onos-operator --wait
    else
      helm install -n kube-system onos-operator onos/onos-operator --wait --version $onos_operator_version
    fi
  else
    if [ -z $onos_operator_version ]; then
      helm install $registry -n kube-system onos-operator onos/onos-operator --wait
    else
      helm install $registry -n kube-system onos-operator onos/onos-operator --wait --version $onos_operator_version
    fi
  fi

  # create a namespace for ONOS
  kubectl create namespace $NAMESPACE
}

export cli_command="kubectl -n micro-onos exec -t deploy/onos-cli -- "
export cli_retry_command="$onos_test/build/bin/run-cli-command-with-retry-use-chart-cli"
