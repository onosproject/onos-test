#!/bin/bash
# SPDX-FileCopyrightText: 2022-present Intel Corporation
# SPDX-FileCopyrightText: 2021-present Open Networking Foundation <info@opennetworking.org>
#
# SPDX-License-Identifier: Apache-2.0

# Tests that a disaster recovery scenario properly loads saved data from persistence
# This script is intended to be run from the onos-test directory as part of CI

set -eu -o pipefail
onos_test=$PWD
before_file=$(mktemp)-before
after_file=$(mktemp)-after

trap "$onos_test/build/bin/setup-artifacts && $onos_test/build/bin/archive-artifacts && rm $before_file $after_file" EXIT

# configure clustering parameters
E2T_REPLICAS=${E2T_REPLICAS:-"2"}
STORE_CONSENSUS_REPLICAS=${STORE_CONSENSUS_REPLICAS:-""}
STORE_CONSENSUS_PARTITIONS=${STORE_CONSENSUS_PARTITIONS:-""}
STORE_CONSENSUS_PERSISTENCE_STORAGE_CLASS=${STORE_CONSENSUS_PERSISTENCE_STORAGE_CLASS:-""}

clustering_args=""

if [ "$STORE_CONSENSUS_PERSISTENCE_STORAGE_CLASS" != "" ]
then
  clustering_args="$clustering_args --set global.store.consensus.persistence.storageClass=$STORE_CONSENSUS_PERSISTENCE_STORAGE_CLASS"
fi

if [ "$STORE_CONSENSUS_REPLICAS" != "" ]
then
  clustering_args="$clustering_args --set global.store.consensus.replicas=$STORE_CONSENSUS_REPLICAS"
fi

if [ "$STORE_CONSENSUS_PARTITIONS" != "" ]
then
  clustering_args="$clustering_args --set global.store.consensus.partitions=$STORE_CONSENSUS_PARTITIONS"
fi

export cli_command="kubectl -n micro-onos exec -t deploy/onos-cli -- "
get_cells_command="$CLI_COMMAND  onos topo get entities --kind e2cell --no-headers"

# set up the test KinD cluster
. $onos_test/build/bin/setup-test-cluster
setup_test_cluster

# install sd-ran
helm install -n micro-onos $registry \
     $TAG_OPTIONS \
     --set import.ran-simulator.enabled=true \
     --set import.onos-config.enabled=false \
     --set import.onos-uenib.enabled=true \
     --set import.onos-kpimon.enabled=true \
     --set onos-kpimon.logging.loggers.root.level=debug \
     $clustering_args \
     sdran $SDRAN_CHART_REPO/sd-ran --wait


# grab the cells output
cells_found=0
for i in $(seq 1 20)
do
  $get_cells_command | sort >$before_file
  if ! grep e2cell $before_file >/dev/null
  then
    sleep 3
    continue
  fi
  cells_found=1
  break
done

if [ "$cells_found" == "0" ]
then
  echo '*** No cells found before restart'
  exit 1
fi


# simulate a cluster crash
helm uninstall sdran -n micro-onos

# recover sd-ran
helm install -n micro-onos $registry \
     --set global.image.tag=latest \
     --set import.ran-simulator.enabled=false \
     --set import.onos-config.enabled=false \
     --set import.onos-uenib.enabled=true \
     --set import.onos-kpimon.enabled=true \
     --set onos-kpimon.logging.loggers.root.level=debug \
     $clustering_args \
     sdran sdran/sd-ran --wait

# grab the cells output after recovery
cells_found=0
for i in $(seq 1 20)
do
  $get_cells_command | sort >$after_file
  if ! grep e2cell $after_file >/dev/null
  then
    sleep 3
    continue
  fi
  cells_found=1
  break
done

if [ "$cells_found" == "0" ]
then
  echo '*** No cells found after restart'
  exit 1
fi

echo Before:
cat $before_file

echo After:
cat $after_file

# make sure the cells are all still there
if ! diff $before_file $after_file
then
  echo "E2t Recovery Smoke test failed"
  exit 1
fi

echo "E2T Recovery Smoke test completed successfully!"
