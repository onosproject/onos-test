#!/usr/bin/env python3
""""
 Copyright 2021-present Open Networking Foundation.

 Licensed under the Apache License, Version 2.0 (the "License");
 you may not use this file except in compliance with the License.
 You may obtain a copy of the License at

     http://www.apache.org/licenses/LICENSE-2.0

 Unless required by applicable law or agreed to in writing, software
 distributed under the License is distributed on an "AS IS" BASIS,
 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 See the License for the specific language governing permissions and
 limitations under the License.

 Checks that the KPIMON CLI and the UENIB CLI return the same values for
 the average number of UEs
"""

import subprocess

if __name__ == '__main__':
    check = "KPIMON and UE NIB num UEs"
    failure = int(1)
    success = int(0)
    KPIMON_NODE_ID = 0
    KPIMON_CELL_ID = 1
    KPIMON_UE_COUNT = 5
    UENIB_KEY = 1
    ASPECT = 1
    UENIB_UE_COUNT = 1
    base_cli_command = 'kubectl -n micro-onos exec -t deploy/onos-cli -- '
    kpimon_cli_command = base_cli_command + 'onos kpimon list metrics --no-headers'
    uenib_cli_command = base_cli_command + 'onos uenib get ues --aspect RRC.Conn.Max --no-headers --verbose'

    # capture CLI output from KPIMON and UENIB
    kpimon_output = ""
    while kpimon_output == "":
        kpimon_output = subprocess.check_output(args=kpimon_cli_command, shell=True).decode("utf-8")
    print("kpimon output:\n" + kpimon_output)

    print("FIXME! kpimon list metrics output needs to be fixed and cleaned-up")
    exit(0)

    # process the KPIMON output
    ues = {}
    for item in kpimon_output.splitlines():
        fields = item.split()
        node_id = fields[KPIMON_NODE_ID]
        cell_id = fields[KPIMON_CELL_ID]
        key = node_id + ":" + cell_id
        value = fields[KPIMON_UE_COUNT]
        print("key=", key, "; value=", value)
        ues[key] = value

    uenib_output = ""
    while uenib_output == "":
        uenib_output = subprocess.check_output(args=uenib_cli_command, shell=True).decode("utf-8")
    print("uenib output:\n" + uenib_output)

    # Now check that the values in the UE NIB are correct
    for item in uenib_output.splitlines():
        fields = item.split()
        if fields[0] == "ID:":
            key = fields[UENIB_KEY]
        elif fields[0] != "Aspects:":
            av = fields[ASPECT].split("=")
            value = av[UENIB_UE_COUNT]
            kpimon_value = ues.get(key, "<None>")
            if kpimon_value != value:
                print("kpimon output:" + kpimon_output)
                print("uenib output:" + uenib_output)
                print("UE NIB value for " + key + " is wrong. Wanted " + kpimon_value + " got " + value)
                exit(failure)

    print("Check " + check + " passed!")
    exit(success)
