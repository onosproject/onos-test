#!/bin/bash
# SPDX-FileCopyrightText: 2020-present Open Networking Foundation <info@opennetworking.org>
#
# SPDX-License-Identifier: Apache-2.0

# This script is intended to be run from the onos-test directory as part of CI

set -eu -o pipefail
onos_test=$PWD
trap "$onos_test/build/bin/setup-artifacts && $onos_test/build/bin/archive-artifacts" EXIT

# configure proxy variables
use_proxy="1"
proxy="mirror.registry.opennetworking.org"

# configure clustering parameters
clustering_args=""
STORE_CONSENSUS_REPLICAS=${STORE_CONSENSUS_REPLICAS:-""}
STORE_CONSENSUS_PARTITIONS=${STORE_CONSENSUS_PARTITIONS:-""}
STORE_CONSENSUS_PERSISTENCE_STORAGE_CLASS=${STORE_CONSENSUS_PERSISTENCE_STORAGE_CLASS:-""}

if [ -n "$STORE_CONSENSUS_PERSISTENCE_STORAGE_CLASS" ]; then
  clustering_args="$clustering_args --set global.store.consensus.persistence.storageClass=$STORE_CONSENSUS_PERSISTENCE_STORAGE_CLASS"
fi

if [ -n "$STORE_CONSENSUS_REPLICAS" ]; then
  clustering_args="$clustering_args --set global.store.consensus.replicas=$STORE_CONSENSUS_REPLICAS"
fi

if [ -n "$STORE_CONSENSUS_PARTITIONS" ]; then
  clustering_args="$clustering_args --set global.store.consensus.partitions=$STORE_CONSENSUS_PARTITIONS"
fi

# set up the test KinD cluster
. $onos_test/build/bin/setup-test-cluster
setup_test_cluster

export E2T_REPLICAS=${E2T_REPLICAS:-1}

# install sd-ran
helm install -n micro-onos $registry \
     --set global.image.tag=latest \
     --set import.ran-simulator.enabled=true \
     --set import.onos-config.enabled=false \
     --set import.onos-uenib.enabled=true \
     --set import.onos-kpimon.enabled=true \
     --set onos-kpimon.logging.loggers.root.level=debug \
     --set onos-e2t.replicaCount=$E2T_REPLICAS \
     $clustering_args \
     sdran sdran/sd-ran --wait

# Check E2T instance count
instances=$(kubectl -n micro-onos get pods | egrep '^onos-e2t-' | wc -l)
[ $instances -ne $E2T_REPLICAS ] && echo "Incorrect E2T count: $instances" && false

# Check topo relations
let ctlCount=$E2T_REPLICAS*2
$cli_retry_command "$onos_test/build/bin/check-topo-relations" "topo get relations" "controls=$ctlCount contains=6"

# Check topo entities
$cli_retry_command "$onos_test/build/bin/check-topo-entities" "topo get entities" "e2t=$E2T_REPLICAS e2node=2 e2cell=6"

$cli_retry_command "$onos_test/build/bin/check-e2t-subscriptions onos-kpimon-v2" "e2t list subscriptions"

$cli_retry_command "$onos_test/build/bin/check-kpimon-list-metrics" "kpimon list metrics"

$onos_test/build/bin/check-kpimon-report-interval

echo "E2T Smoke test completed successfully!"
