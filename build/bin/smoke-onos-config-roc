#!/bin/bash
# Copyright 2020-present Open Networking Foundation.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

# This script is intended to be run from the onos-test directory as part of CI

extract_description() {
  grep json_val: $tmpfile | sed 's/\\n//g' | sed 's/\\//g' | sed -e 's/json_val...//' | sed -e 's/"$//' >$tmpfile.json
  description=$(jq '.[][][]."description"' $tmpfile.json)
  echo $description
}

set -eu -o pipefail
onos_test=$PWD
tmpfile="/tmp/smoke$$"
trap "$onos_test/build/bin/setup-artifacts && $onos_test/build/bin/archive-artifacts && rm -f $tmpfile*" EXIT

# configure proxy variables
use_proxy="1"
proxy="mirror.registry.opennetworking.org"

# set up the test KinD cluster
. $onos_test/build/bin/setup-test-cluster
setup_test_cluster

# pre-load the config model init image
docker pull $proxy/onosproject/config-model-init:v1.0.1
kind load docker-image $proxy/onosproject/config-model-init:v1.0.1

# pre-load the config model registry image
docker pull $proxy/onosproject/config-model-registry:v1.0.1
kind load docker-image $proxy/onosproject/config-model-registry:v1.0.1

# install aether-roc
helm install -n micro-onos $registry aether-roc-umbrella \
      --set onos-config.image.tag=latest \
      --set import.aether-roc-gui.v3.enabled=false \
      --set import.aether-roc-gui.v4.enabled=false \
      --set import.grafana.enabled=false \
      --set import.prometheus.amp.enabled=false \
      --set import.prometheus.acc.enabled=false \
      --set import.prometheus.ace.enabled=false \
      aether/aether-roc-umbrella

sleep 30

kubectl wait pod -n micro-onos --for=condition=Ready -l type=config --timeout=300s

# common gnmi_cli arguments
common_args="-address onos-config:5150  -timeout 5s -en JSON -alsologtostderr \
             -insecure -client_crt /etc/ssl/certs/client1.crt -client_key /etc/ssl/certs/client1.key \
             -ca_crt /etc/ssl/certs/onfca.crt"

# set known values for the connectivity service
set_command=''
set_command+='prefix:<elem:<name:"connectivity-service"> target:"connectivity-service-v4"> '
set_command+='update:<path:<elem:<name:"connectivity-service" key:<key:"id" value:"cs5gtest">> elem:<name:"core-5g-endpoint"> target:"connectivity-service-v4"> '
set_command+='val:<string_val:"http://aether-roc-umbrella-sdcore-test-dummy/v1/config/5g">>'
set_command+='update:<path:<elem:<name:"connectivity-service" key:<key:"id" value:"cs5gtest">> elem:<name:"description"> target:"connectivity-service-v4"> '
set_command+='val:<string_val:"5G Test">> '
set_command+='update:<path:<elem:<name:"connectivity-service" key:<key:"id" value:"cs5gtest">> elem:<name:"display-name"> target:"connectivity-service-v4"> '
set_command+='val:<string_val:"ROC 5G Test Connectivity Service">> '
set_command+='update:<path:<elem:<name:"connectivity-service" key:<key:"id" value:"cs5gtest">> elem:<name:"id"> target:"connectivity-service-v4"> '
set_command+='val:<string_val:"cs5gtest">> '
set_command+='extension:<registered_ext:<id:101 msg:"4.0.0">> '
set_command+='extension:<registered_ext:<id:102 msg:"Aether">>'
initial_set=$( $cli_command gnmi_cli $common_args -set -proto "$set_command" 2>&1 )
if echo $initial_set | grep "returned RPC error"
then
  echo "*** Setting connectivity service returned an error"
  exit 1
else
    echo "+++ Setting connectivity service was correct"
fi

# check that values were properly set
get_command=''
get_command+='path:<target: "connectivity-service-v4", elem:<name:"connectivity-service" > elem:<name:"connectivity-service" key:<key:"id" value:"*" > > elem:<name:"description">>'
$cli_command gnmi_cli $common_args -get -proto "$get_command" >$tmpfile
description=$(extract_description)
if [ "$description" == '"5G Test"' ]
then
  echo "+++ Get of connectivity service description is correct"
else
  echo "*** Get of connectivity service description is incorrect"
  exit 1
fi

echo "=== onos-config-roc smoke test completed successfully!"
