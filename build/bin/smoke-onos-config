#!/bin/bash
# SPDX-FileCopyrightText: 2022-present Intel Corporation
# SPDX-FileCopyrightText: 2020-present Open Networking Foundation <info@opennetworking.org>
#
# SPDX-License-Identifier: Apache-2.0

# Smoke test for the onos-config component
# This script is intended to be run from the onos-test directory as part of CI

set -eu -o pipefail

make_path () {
  result=("<target: 'devicesim-1',")
  for i in "$@"
  do
    result+=(" elem: <name: '$i'> ")
  done
  result+=(" >")
  echo "${result[@]}"
}

extract_timezone() {
  grep json_val: "$tmpfile" | sed 's/\\n//g' | sed 's/\\//g' | sed -e 's/json_val...//' | sed -e 's/"$//' >"$tmpfile.json"
  timezone=$(jq '.[][][]."timezone-name"' "$tmpfile.json")
  echo "$timezone"
}

set -eu -o pipefail
onos_test=$PWD
tmpfile="/tmp/smoke$$"
trap '$onos_test/build/bin/setup-artifacts && $onos_test/build/bin/archive-artifacts && rm -f $tmpfile*' EXIT

# set up the test KinD cluster
. "$onos_test/build/bin/setup-test-cluster"
setup_test_cluster

# install onos-config
helm install -n "$NAMESPACE" \
     $REGISTRY_OPTIONS \
     $TAG_OPTIONS \
     --set onos-config.plugin.compiler.version=v1.0.1 \
     --set import.onos-gui.enabled=false \
     onos "$ONOS_CHART_REPO/onos-umbrella" --wait

# install the device simulator
SIM_IMAGE=""
if [[ "${proxy}" == "" ]]; then
  SIM_IMAGE="--set image.repository=$proxy/onosproject/device-simulator"
fi
helm install -n "$NAMESPACE" device-1 $REGISTRY_OPTIONS $SIM_IMAGE "$ONOS_CHART_REPO/device-simulator" --wait

# common gnmi_cli arguments
common_args=("-address" "onos-config:5150"  "-timeout" "5s" "-en" "JSON" "-alsologtostderr"
             "-insecure" "-client_crt" "/etc/ssl/certs/client1.crt" "-client_key" "/etc/ssl/certs/client1.key"
             "-ca_crt" "/etc/ssl/certs/onfca.crt")

sim_args=("-address" "device-1-device-simulator:11161"  "-timeout" "5s" "-en" "JSON" "-alsologtostderr"
            "-insecure" "-tlsDisabled" )

# Check that plugin models have been loaded correctly
# By default 3 model-plugins are loaded
plugin_count=$($CLI_COMMAND  onos config get plugins --no-headers | grep -c Loaded)
if [[ "$plugin_count" -eq 3 ]]; then
  echo "+++ Correct number of plugins loaded"
else
  echo "*** Error: Wrong number of plugins loaded"
  exit 1
fi

# Create topo entries for the simulated device
$CLI_COMMAND  onos topo create kind devicesim devicesim
$CLI_COMMAND  onos topo create entity devicesim-1 -a \
                  onos.topo.Configurable='{"address":"devicesim1-device-simulator:11161","version":"1.0.0","type":"devicesim"}' \
                  -a onos.topo.TLSOptions='{"insecure":true,"plain":true}' -k devicesim

# gnmi paths
tzelems=('system' 'clock' 'config' 'timezone-name')
tzpath=$(make_path "${tzelems[@]}")
badelems=('XXXsystemXXX' 'clock' 'config' 'timezone-name')
badpath=$(make_path "${badelems[@]}")

# attempt to set a bad path - should result in an error
bad_set=$($CLI_COMMAND  gnmi_cli -set "${common_args[@]}" -proto \
               "update: <path: $badpath \
                val: <string_val: 'Bad!Value'>>" 2>&1)
if [[ "$bad_set" == *"code = InvalidArgument"* ]]
then
  echo "+++ Correct error returned for set of bad path"
else
  echo "*** Error not returned for get of bad path"
  exit 1
fi

# set an initial timezone value
initial_set=$($CLI_COMMAND  gnmi_cli -set "${common_args[@]}" -proto \
               "update: <path: $tzpath \
                val: <string_val: 'Europe/Paris'>>" 2>&1)
if [[ "$initial_set" == *"op: UPDATE"* ]]
then
  echo "+++ Initial timezone set operation successful"
else
  echo "*** Error setting initial timezone value"
  exit 1
fi

# read the timezone value back and check it
$CLI_COMMAND  gnmi_cli -get "${common_args[@]}" -proto "path: $tzpath" >$tmpfile

timezone=$(extract_timezone)
if [ "$timezone" == '"Europe/Paris"' ]
then
  echo "+++ Get of initial timezone setting is correct"
else
  echo "*** Get of initial timezone setting is incorrect"
  exit 1
fi

# change the timezone
change_set=$($CLI_COMMAND  gnmi_cli -set "${common_args[@]}" -proto \
               "update: <path: $tzpath \
                val: <string_val: 'Europe/Dublin'>>" 2>&1)
if [[ "$change_set" == *"op: UPDATE"* ]]
then
  echo "+++ Change timezone set operation successful"
else
  echo "*** Error changing timezone value"
  exit 1
fi

# check that the modified timezone is correct
$CLI_COMMAND  gnmi_cli -get "${common_args[@]}" -proto "path: $tzpath" >$tmpfile

timezone=$(extract_timezone)
if [ "$timezone" == '"Europe/Dublin"' ]
then
  echo "+++ Get of reset timezone setting is correct"
else
  echo "*** Get of reset timezone setting is incorrect"
  exit 1
fi

# check that the modified timezone is correct on the target simulator
$CLI_COMMAND  gnmi_cli -get "${sim_args[@]}" -proto "path: $tzpath" >$tmpfile

timezone_from_sim=$(grep string_val $tmpfile | sed 's/.* "/"/')
if [ "$timezone_from_sim" == '"Europe/Dublin"' ]
then
  echo "+++ Get of reset timezone setting from simulator is correct"
else
  echo "*** Get of reset timezone setting from simulator is incorrect"
  exit 1
fi

sleep 5

# check capabilities
models_count=$($CLI_COMMAND  gnmi_cli -capabilities "${common_args[@]}" | grep -c supported_models)
if [ "$models_count" == '8' ]
then
  echo "+++ Models count from capabilities is correct"
else
  echo "*** Models count from capabilities is incorrect"
  exit 1
fi

echo "=== onos-config smoke test completed successfully!"
