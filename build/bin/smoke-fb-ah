#!/bin/bash
# Copyright 2020-present Open Networking Foundation.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

# This script is intended to be run from the onos-test directory as part of CI

set -eu -o pipefail

if [ "$#" -gt 1 ]; then
  echo "Usage: smoke-onos-fb-ah [--no-installs]"
  exit 1
fi

onos_test=$PWD

if [ "$#" -eq 0 ]; then
  rm -rf smoke && mkdir smoke && pushd smoke
  sources_root="."

  # Pull the source repos
  git clone git@github.com:onosproject/onos-e2t.git
  git clone git@github.com:onosproject/onos-e2sub.git
  git clone git@github.com:onosproject/ran-simulator.git
  git clone git@github.com:onosproject/onos-cli.git
  git clone git@github.com:onosproject/onos-topo.git

   # Download the onos helm charts
  git clone https://github.com/onosproject/onos-helm-charts.git
  git clone git@github.com:onosproject/sdran-helm-charts.git
else
  sources_root=".."
fi

# Make a kind cluster
kind delete cluster && kind create cluster --quiet

# Create Atomix resources
kubectl create -f https://raw.githubusercontent.com/atomix/kubernetes-controller/master/deploy/atomix-controller.yaml
kubectl create -f https://raw.githubusercontent.com/atomix/raft-storage-controller/master/deploy/raft-storage-controller.yaml
kubectl create -f https://raw.githubusercontent.com/atomix/cache-storage-controller/master/deploy/cache-storage-controller.yaml

# initialize the operator
kubectl create -f https://raw.githubusercontent.com/onosproject/onos-operator/master/deploy/onos-operator.yaml

sleep 45
kubectl wait pod -n kube-system --for=condition=Ready -l name=config-operator --timeout=10m

# Build the images
pushd ${sources_root}/onos-e2t && make kind && popd
pushd ${sources_root}/onos-e2sub && make kind && popd
pushd ${sources_root}/onos-topo && make kind && popd
pushd ${sources_root}/ran-simulator && make kind && popd
pushd ${sources_root}/onos-cli && make kind && popd

pushd ${sources_root}

helm repo add cord https://charts.opencord.org
helm repo add atomix https://charts.atomix.io
helm repo add onos https://charts.onosproject.org
helm repo add sdran --username "$repo_user" --password "$repo_password" https://sdrancharts.onosproject.org
helm repo update

# create a namespace for the test
kubectl create namespace smoke-fb-ah

helm install -n smoke-fb-ah \
   --set import.fb-ah-xapp.enabled=true \
   --set import.fb-ah-gui.enabled=true \
   --set import.ah-eson-test-server.enabled=true \
   --set import.ran-simulator.enabled=true \
   sd-ran sdran/sd-ran


# wait for nodes to start up
sleep 30
kubectl wait pod -n smoke-fb-ah  --for=condition=Ready -l app=airhop --timeout=10m

tmpfile="/tmp/smoke$$"

kubectl run onos-cli -n smoke-fb-ah --rm -i --image onosproject/onos-cli:latest --restart Never --command /usr/local/bin/onos e2t list connections | grep -v deleted > $tmpfile
cat $tmpfile
$onos_test/build/bin/check-e2t-connections <$tmpfile

kubectl run onos-cli -n smoke-fb-ah --rm -i --image onosproject/onos-cli:latest --restart Never --command /usr/local/bin/onos e2sub list endpoints | grep -v deleted > $tmpfile
cat $tmpfile
$onos_test/build/bin/check-e2sub-endpoints <$tmpfile

kubectl run onos-cli -n smoke-fb-ah --rm -i --image onosproject/onos-cli:latest --restart Never --command /usr/local/bin/onos e2sub list subscriptions | grep -v deleted > $tmpfile
cat $tmpfile
$onos_test/build/bin/check-e2sub-subscriptions <$tmpfile

rm $tmpfile

if [ "$#" -eq 0 ]; then
  popd
fi


kubectl run onos-cli -n smoke-fb-ah --quiet --rm -i --image onosproject/onos-cli:latest --restart Never --command -- /usr/bin/curl -s http://fb-ah-xapp:8080/status >$tmpfile 2>/dev/null
grep Alive $tmpfile
if (( $? != 0 ))
then
  echo FB AH xapp is not reporting alive status
  exit 1
fi

echo "Smoke test completed successfully!"
