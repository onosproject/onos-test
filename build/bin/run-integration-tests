#!/bin/bash
# Copyright 2020-present Open Networking Foundation.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#
# Script to build and run all of the onos integration tests

set -eu -o pipefail

if [ -z $1 ]
then
  testSuite="*** Unknown Test Suite ***"
elif [ -n $1 ]
then
# otherwise make first arg as a rental
  testSuite=$1
fi

# Create a clean KinD cluster
kind delete cluster && kind create cluster --quiet

use_proxy="1"
proxy="mirror.registry.opennetworking.org"

# install Atomix
if [ $use_proxy == 0 ]; then
   kubectl create -f https://raw.githubusercontent.com/atomix/kubernetes-controller/master/deploy/atomix-controller.yaml
   kubectl create -f https://raw.githubusercontent.com/atomix/raft-storage-controller/master/deploy/raft-storage-controller.yaml
   kubectl create -f https://raw.githubusercontent.com/atomix/cache-storage-controller/master/deploy/cache-storage-controller.yaml
else
   helm install --set image.repository=$proxy/atomix/kubernetes-controller atomix-controller atomix/atomix-controller -n kube-system
   helm install --set image.repository=$proxy/atomix/raft-storage-controller raft atomix/raft-storage-controller -n kube-system
   helm install --set image.repository=$proxy/atomix/cache-storage-controller cache atomix/cache-storage-controller -n kube-system
fi

# initialize the operator
if [ $use_proxy == 0 ]; then
   helm install -n kube-system onos-operator onos/onos-operator --wait
else
   helm install --set global.image.registry=$proxy -n kube-system  onos-operator onos/onos-operator --wait
fi


# make a directory to hold the downloaded source trees
rm -rf integration-tests && mkdir integration-tests && pushd integration-tests

# Download helmit
pushd .. && GO111MODULE=on go get github.com/onosproject/helmit/cmd/helmit && popd

# Download the onos helm charts
git clone https://github.com/onosproject/onos-helm-charts.git
git clone git@github.com:onosproject/sdran-helm-charts.git

common_args="--secret sd-ran-username=$repo_user --secret sd-ran-password=$repo_password --no-teardown"
if [ $use_proxy = "1" ]; then
   common_args="$common_args --args registry=mirror.registry.opennetworking.org --image mirror.registry.opennetworking.org/onosproject/helmit-runner:latest"
fi
atomix_storage_version="v0.5.3"

run_integration_test() {
     test_name=$1
     binary_name=$2
     chart_name=$3
     proxy_args=""
     if [ $use_proxy = "1" ]; then
         proxy_args="--set $chart_name.global.image.registry=$proxy --set $chart_name.global.image.registry=$proxy --set $chart_name.global.storage.consensus.image=$proxy/atomix/raft-storage-node:$atomix_storage_version"
     fi
     export NAMESPACE=$(echo $test_name | tr "[:upper:]" "[:lower:]" )
     export NAMESPACE=${NAMESPACE}-ns
     echo $NAMESPACE
     ( kubectl delete ns "$NAMESPACE" || true ) && kubectl create ns "$NAMESPACE"
     helmit test -n "$NAMESPACE" $common_args "$binary_name" --test "$test_name" --no-teardown $proxy_args
     ../../build/bin/check-test-log-errors
}

run_integration_test_suite() {
     suite_name=$1
     binary_name=$2
     chart_name=$3
     proxy_args=""
     if [ $use_proxy = "1" ]; then
         proxy_args="--set $chart_name.global.image.registry=$proxy --set $chart_name.global.image.registry=$proxy --set $chart_name.global.storage.consensus.image=$proxy/atomix/raft-storage-node:$atomix_storage_version"
     fi
     export NAMESPACE=$(echo $suite_name | tr "[:upper:]" "[:lower:]" )
     export NAMESPACE=${NAMESPACE}-ns
     echo $NAMESPACE
     ( kubectl delete ns "$NAMESPACE" || true ) && kubectl create ns "$NAMESPACE"
     helmit test -n "$NAMESPACE" $common_args "$binary_name" --suite "$suite_name" --no-teardown $proxy_args
     ../../build/bin/check-test-log-errors
}

case "$testSuite" in
"onos-topo-tests")
     # onos-topo
     git clone https://github.com/onosproject/onos-topo.git
     cd onos-topo
     make kind

     #run_integration_test_suite "topo" "./cmd/onos-topo-tests" "onos-topo"
     ;;

"onos-config-tests")
    # onos-config
    git clone https://github.com/onosproject/onos-config.git
    cd onos-config
    make kind

    run_integration_test_suite "cli" "./cmd/onos-config-tests" "onos-umbrella"
    run_integration_test_suite "gnmi" "./cmd/onos-config-tests" "onos-umbrella"
    #run_integration_test_suite "ha" "./cmd/onos-config-tests" "onos-umbrella"
    ;;

"onos-e2t-tests")
    # onos-e2t
    git clone git@github.com:onosproject/onos-e2t.git
    cd onos-e2t
    make kind

    run_integration_test_suite "e2" "./cmd/onos-e2t-tests" "sd-ran"
    ;;

"ran-sim-tests")
    # ran-simulator
    git clone git@github.com:onosproject/ran-simulator.git
    cd ran-simulator
    make kind

    run_integration_test_suite "e2t" "./cmd/ransim-tests" "sd-ran"
    ;;

"onos-pci-tests")
    # onos-pci
    git clone git@github.com:onosproject/onos-pci.git
    cd onos-pci
    make kind

    run_integration_test_suite "pci" "./cmd/onos-pci-tests" "sd-ran"
    ;;

"onos-helm-charts")
    # onos-helm-charts

    cd onos-helm-charts
    cd onos-umbrella; helm dependency build; cd ..
    make test
    ;;

"sdran-helm-charts")
    # sdran-helm-charts
    cd sdran-helm-charts
    helm repo add sdran --username ${repo_user} --password ${repo_password} https://sdrancharts.onosproject.org
    helm repo add cord https://charts.opencord.org
    helm repo add atomix https://charts.atomix.io
    helm repo add onos https://charts.onosproject.org
    helm repo update
    cd sd-ran; helm dependency build; cd ..
    make test
    ;;

"master-build")
    # build of all micro onos components
    ../build/bin/build-everything
    ;;

*) echo "You have failed to specify test suite."
    exit 1
    ;;
esac

popd

echo "Test suite $testSuite passed!"
