#!/bin/bash

# Script to build and run all of the onos integration tests

set -eu -o pipefail

if [ -z $1 ]
then
  testSuite="*** Unknown Test Suite ***"
elif [ -n $1 ]
then
# otherwise make first arg as a rental
  testSuite=$1
fi

WEBSITE_USER=$2
WEBSITE_PASSWORD=$3

# Download and install kubectl
curl -LO https://storage.googleapis.com/kubernetes-release/release/$(curl -s https://storage.googleapis.com/kubernetes-release/release/stable.txt)/bin/linux/amd64/kubectl && chmod +x kubectl && sudo mv kubectl /usr/local/bin/
curl -sfL https://install.goreleaser.com/github.com/golangci/golangci-lint.sh | sh -s -- -b $(go env GOPATH)/bin v1.23.7

# Download and install KinD
GO111MODULE=on go get sigs.k8s.io/kind

# Make a kind cluster
kind create cluster --quiet

# Download helmit
pushd .. && GO111MODULE=on go get github.com/onosproject/helmit/cmd/helmit && popd

# Download the onos helm charts
pushd .. && git clone https://github.com/onosproject/onos-helm-charts.git && popd
pushd .. && git clone git@github.com:onosproject/sdran-helm-charts.git && popd

case "$testSuite" in
"onos-topo")
     # onos-topo
     pushd ..
     git clone https://github.com/onosproject/onos-topo.git

     cd onos-topo
     make kind
     helmit test ./cmd/onos-topo-tests -c ../onos-helm-charts --no-teardown

     popd;;

"onos-config")
    # onos-config
    pushd ..
    git clone https://github.com/onosproject/onos-config.git

    cd onos-config
    make kind

    kubectl create ns cli-test
    helmit test -n cli-test ./cmd/onos-config-tests --suite cli

    kubectl create ns gnmi-test
    helmit test -n gnmi-test ./cmd/onos-config-tests --suite gnmi

    kubectl create ns gnmi-bench-set
    helmit benchmark -n gnmi-bench-set ./cmd/onos-config-benchmarks -c ../onos-helm-charts --iterations 5000 --max-latency 20ms --benchmark BenchmarkSet

    kubectl create ns gnmi-bench-get
    helmit benchmark -n gnmi-bench-get ./cmd/onos-config-benchmarks -c ../onos-helm-charts --iterations 5000 --max-latency 20ms --benchmark BenchmarkGet
    
    popd;;

"onos-ric")
    # onos-ric
    pushd ..
    git clone git@github.com:onosproject/onos-ric.git

    cd onos-ric
    make kind
    helmit test --secret "sd-ran-username=$WEBSITE_USER" --secret sd-ran-password="$WEBSITE_PASSWORD" ./cmd/onos-ric-tests -c .. --no-teardown
    helmit benchmark --secret "sd-ran-username=$WEBSITE_USER" --secret sd-ran-password="$WEBSITE_PASSWORD" --benchmark BenchmarkGetStations --iterations 10000 --max-latency 4ms ./cmd/onos-ric-benchmarks -c ../sdran-helm-charts --no-teardown
    popd;;

"onos-helm-charts")
    # onos-helm-charts
    pushd ..

    cd onos-helm-charts
    cd onos-umbrella; helm dependency build; cd ..
    helmit test ./test -c . --no-teardown
    popd;;

"sdran-helm-charts")
    # sdran-helm-charts
    pushd ..

    cd sdran-helm-charts
    helm repo add sdran --username ${WEBSITE_USER} --password ${WEBSITE_PASSWORD} https://sdrancharts.onosproject.org
    cd sd-ran; helm dependency build; cd ..
    make test
    popd;;

"master-build")
    # build of all micro onos components
    helm repo add sdran --username ${WEBSITE_USER} --password ${WEBSITE_PASSWORD} https://sdrancharts.onosproject.org
    pushd ..
    export VERSION=v7.8.9 && build-tools/build/release/release-micro-onos
    popd;;

*) echo "You have failed to specify test suite."
    exit 1
    ;;
esac
