#!/bin/bash
# SPDX-FileCopyrightText: 2020-present Open Networking Foundation <info@opennetworking.org>
#
# SPDX-License-Identifier: Apache-2.0

# Script to build and run all of the onos integration tests

set -eu -o pipefail

if [ -z "$1" ]
then
  testSuite="*** Unknown Test Suite ***"
elif [ -n "$1" ]
then
# otherwise make first arg as a rental
  testSuite="$1"
fi

# configure proxy variables
use_proxy="1"
proxy="mirror.registry.opennetworking.org"

# set up the test KinD cluster
onos_test=$PWD
. "$onos_test/build/bin/setup-test-cluster"
setup_test_cluster

"$onos_test/build/bin/setup-artifacts"

# make a directory to hold the downloaded source trees
rm -rf integration-tests && mkdir integration-tests && pushd integration-tests

# Download helmit
pushd .. && GO111MODULE=on go install github.com/onosproject/helmit/cmd/helmit@latest && popd

keycloak_password=${keycloak_password:-""}
common_args="--timeout 60m --secret keycloak-password=$keycloak_password --no-teardown"
if [ $use_proxy = "1" ]; then
   common_args="$common_args --args registry=mirror.registry.opennetworking.org --image mirror.registry.opennetworking.org/onosproject/helmit-runner:latest"
fi
atomix_storage_version="v0.5.3"

run_integration_test_suite() {
     suite_name=$1
     binary_name=$2
     chart_name=$3
     extra_helmit_args=$4
     proxy_args=""
     if [ $use_proxy = "1" ]; then
         proxy_args="--set $chart_name.global.image.registry=$proxy --set $chart_name.global.image.registry=$proxy --set $chart_name.global.storage.consensus.image=$proxy/atomix/raft-storage-node:$atomix_storage_version"
     fi
     NAMESPACE=$(echo "$suite_name" | tr "[:upper:]" "[:lower:]" )
     NAMESPACE=${NAMESPACE}-ns
     export NAMESPACE
     echo "$NAMESPACE"
     err="0"
     ( kubectl delete ns "$NAMESPACE" || true ) && kubectl create ns "$NAMESPACE"
     helmit_args="test -n $NAMESPACE $common_args $binary_name --suite $suite_name --no-teardown $proxy_args $extra_helmit_args"
     read -ra helmit_args <<<"${helmit_args}" # prevents globbing
     if ! helmit "${helmit_args[@]}"; then
         err=${PIPESTATUS[0]}
         echo "helmit returned error $err"
     fi
     ../../build/bin/archive-artifacts
     if [ "$err" -ne "0" ]; then
         echo "Smoke test failed"
         exit "$err"
     fi
     ../../build/bin/check-test-log-errors
}

case "$testSuite" in
"onos-topo-tests")
     # onos-topo
     git clone https://github.com/onosproject/onos-topo.git
     cd onos-topo
     git log -1
     make kind

     run_integration_test_suite "topo" "./cmd/onos-topo-tests" "onos-topo" ""
     ;;

"onos-config-tests")
    # onos-config
    git clone https://github.com/onosproject/onos-config.git
    cd onos-config
    git log -1
    make kind

    run_integration_test_suite "config" "./cmd/onos-config-tests" "onos-umbrella" ""
    kubectl delete ns "$NAMESPACE"
    run_integration_test_suite "rbac" "./cmd/onos-config-tests" "onos-umbrella" ""
    ;;

"onos-e2t-tests")
    # onos-e2t
    E2T_REPLICAS=${E2T_REPLICAS:-"2"}
    git clone git@github.com:onosproject/onos-e2t.git
    cd onos-e2t
    git log -1
    make kind

    run_integration_test_suite "e2" "./cmd/onos-e2t-tests" "sd-ran" "--set sd-ran.onos-e2t.replicaCount=$E2T_REPLICAS"
    kubectl delete ns "$NAMESPACE"
    ;;

"ran-sim-tests")
    # ran-simulator
    git clone git@github.com:onosproject/ran-simulator.git
    cd ran-simulator
    git log -1
    make kind

    #run_integration_test_suite "e2t" "./cmd/ransim-tests" "sd-ran" ""
    ;;

"onos-pci-tests")
    # onos-pci
    git clone git@github.com:onosproject/onos-pci.git
    cd onos-pci
    git log -1
    make kind

    run_integration_test_suite "pci" "./cmd/onos-pci-tests" "sd-ran" ""
    kubectl delete ns "$NAMESPACE"
    run_integration_test_suite "scale" "./cmd/onos-pci-tests" "sd-ran" ""
    kubectl delete ns "$NAMESPACE"

    ;;

"onos-uenib-tests")
    # onos-pci
    git clone git@github.com:onosproject/onos-uenib.git
    cd onos-uenib
    git log -1
    make kind

    run_integration_test_suite "uenib" "./cmd/onos-uenib-tests" "sd-ran" ""
    ;;

"onos-kpimon-tests")
    # onos-kpimon
    git clone git@github.com:onosproject/onos-kpimon.git
    cd onos-kpimon
    git log -1
    make kind

    run_integration_test_suite "kpm" "./cmd/onos-kpimon-test" "sd-ran" ""
    kubectl delete ns "$NAMESPACE"

    run_integration_test_suite "ha" "./cmd/onos-kpimon-test" "sd-ran" ""
    kubectl delete ns "$NAMESPACE"

    ;;

"onos-mlb-tests")
    # onos-mlb
    git clone git@github.com:onosproject/onos-mlb.git
    cd onos-mlb
    git log -1
    make kind

    run_integration_test_suite "overload" "./cmd/onos-mlb-test" "sd-ran" ""
    kubectl delete ns "$NAMESPACE"
    run_integration_test_suite "underload" "./cmd/onos-mlb-test" "sd-ran" ""
    kubectl delete ns "$NAMESPACE"
    run_integration_test_suite "targetload" "./cmd/onos-mlb-test" "sd-ran" ""
    kubectl delete ns "$NAMESPACE"

    ;;

"onos-rsm-tests")
    # onos-rsm
    git clone git@github.com:onosproject/onos-rsm.git
    cd onos-rsm
    git log -1
    make kind

    run_integration_test_suite "slice" "./cmd/onos-rsm-tests" "sd-ran" ""
    kubectl delete ns "$NAMESPACE"
    run_integration_test_suite "scalability" "./cmd/onos-rsm-tests" "sd-ran" ""
    kubectl delete ns "$NAMESPACE"

    ;;

"onos-mho-tests")
    # onos-mho
    git clone git@github.com:onosproject/onos-mho.git
    cd onos-mho
    git log -1
    make kind

    run_integration_test_suite "mho" "./cmd/onos-mho-test" "sd-ran" ""
    kubectl delete ns "$NAMESPACE"
    run_integration_test_suite "ha" "./cmd/onos-mho-test" "sd-ran" ""
    kubectl delete ns "$NAMESPACE"

    ;;

"onos-a1t-tests")
    # onos-a1t
    git clone git@github.com:onosproject/onos-a1t.git
    cd onos-a1t
    git log -1
    make kind
    cd test/utils/xapp && make kind && cd -

    run_integration_test_suite "a1pm" "./cmd/onos-a1t-test" "sd-ran" "--context ./test/utils/charts/"
    kubectl delete ns "$NAMESPACE"

    ;;

"rimedo-ts-tests")
    # rimedo-ts
    git clone git@github.com:onosproject/rimedo-ts.git
    cd rimedo-ts
    git log -1
    make kind

    run_integration_test_suite "ts" "./cmd/rimedo-ts-test" "sd-ran" ""
    kubectl delete ns "$NAMESPACE"

    ;;

"fabric-sim-tests")
    # fabric-sim
    git clone git@github.com:onosproject/fabric-sim.git
    cd fabric-sim
    git log -1
    make kind
    NAMESPACE="test"

    make integration-tests
    ;;

"onos-helm-charts")
    # onos-helm-charts
    git clone https://github.com/onosproject/onos-helm-charts.git
    cd onos-helm-charts
    git log -1
    run_integration_test_suite "onos-topo" "./test" "onos-topo" ""
    kubectl delete ns "$NAMESPACE"
    run_integration_test_suite "onos-config" "./test" "onos-config" ""
    kubectl delete ns "$NAMESPACE"
    run_integration_test_suite "onos-umbrella" "./test" "onos-umbrella" ""
    kubectl delete ns "$NAMESPACE"
    ;;

"sdran-helm-charts")
    # sdran-helm-charts
    git clone https://github.com/onosproject/sdran-helm-charts.git
    cd sdran-helm-charts
    git log -1
    run_integration_test_suite "sd-ran" "./test" "sd-ran" ""
    kubectl delete ns "$NAMESPACE"
    ;;

"master-build")
    # build of all micro onos components
    ../build/bin/build-everything
    ;;

*) echo "You have failed to specify test suite."
    exit 1
    ;;
esac

popd

echo "Test suite $testSuite passed!"
