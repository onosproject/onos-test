#!/bin/bash
# Copyright 2020-present Open Networking Foundation.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

# This script is intended to be run from the onos-test directory as part of CI

set -eu -o pipefail

repo_user=${repo_user:-}
repo_password=${repo_password:-}

if [ -z $repo_user ]; then
  echo "repo_user must be set"
  exit 1
fi

if [ -z $repo_password ]; then
  echo "repo_password must be set"
  exit 1
fi

if [ "$#" -gt 1 ]; then
  echo "Usage: smoke-onos-e2t [--no-installs]"
  exit 1
fi

onos_test=$PWD

if [ "$#" -eq 0 ]; then
  rm -rf smoke && mkdir smoke && pushd smoke
  sources_root="."

  # Pull the source repos
  git clone git@github.com:onosproject/onos-e2t.git
  git clone git@github.com:onosproject/onos-e2sub.git
  git clone git@github.com:onosproject/onos-pci.git
  git clone git@github.com:onosproject/ran-simulator.git
  git clone git@github.com:onosproject/onos-cli.git
  git clone git@github.com:onosproject/onos-topo.git
  git clone git@github.com:onosproject/onos-e2-sm.git

   # Download the onos helm charts
  git clone https://github.com/onosproject/onos-helm-charts.git
  git clone git@github.com:onosproject/sdran-helm-charts.git
else
  sources_root=".."
fi

# Make a kind cluster
kind delete cluster && kind create cluster --quiet

# Create Atomix resources
kubectl create -f https://raw.githubusercontent.com/atomix/kubernetes-controller/master/deploy/atomix-controller.yaml
kubectl create -f https://raw.githubusercontent.com/atomix/raft-storage-controller/master/deploy/raft-storage-controller.yaml
kubectl create -f https://raw.githubusercontent.com/atomix/cache-storage-controller/master/deploy/cache-storage-controller.yaml

# initialize the operator
kubectl create -f https://raw.githubusercontent.com/onosproject/onos-operator/master/deploy/onos-operator.yaml

# Build the images
pushd ${sources_root}/onos-e2t && make kind && popd
pushd ${sources_root}/onos-e2sub && make kind && popd
pushd ${sources_root}/onos-pci && make kind && popd
pushd ${sources_root}/onos-topo && make kind && popd
pushd ${sources_root}/ran-simulator && make kind && popd
pushd ${sources_root}/onos-cli && make kind && popd
pushd ${sources_root}/onos-e2-sm && make kind && popd

pushd ${sources_root}

helm repo add cord https://charts.opencord.org
helm repo add atomix https://charts.atomix.io
helm repo add onos https://charts.onosproject.org
helm repo add sdran --username "$repo_user" --password "$repo_password" https://sdrancharts.onosproject.org
helm repo update

# create a namespace for ONOS
kubectl delete namespace micro-onos || true
kubectl create namespace micro-onos

# get the chart dependencies up to date

# install onos-topo
helm install -n micro-onos --set image.tag=latest onos-topo onos/onos-topo

cd sdran-helm-charts/sd-ran
rm -rf charts Chart.lock
helm dep build
cd ..
helm dependency update sd-ran

# install onos-e2t
helm install -n micro-onos --set image.tag=latest onos-e2t sdran/onos-e2t

# Install the ran simulator
helm install -n micro-onos --set image.tag=latest ran-simulator sdran/ran-simulator

# install onos-e2sub
helm install -n micro-onos --set image.tag=latest onos-e2sub sdran/onos-e2sub

# install onos-pci
helm install -n micro-onos --set image.tag=latest onos-pci sdran/onos-pci

# install onos-kpimon
helm install -n micro-onos --set image.tag=latest onos-kpimon sdran/onos-kpimon

popd

# wait for nodes to start up
kubectl wait pod -n micro-onos  --for=condition=Ready -l app=onos --timeout=300s
sleep 30

tmpfile="/tmp/smoke$$"

kubectl run onos-cli -n micro-onos --rm -i --image onosproject/onos-cli:latest --restart Never --command /usr/local/bin/onos e2t list connections > $tmpfile
cat $tmpfile
$onos_test/build/bin/check-e2t-connections <$tmpfile

kubectl run onos-cli -n micro-onos --rm -i --image onosproject/onos-cli:latest --restart Never --command /usr/local/bin/onos e2sub list endpoints > $tmpfile
cat $tmpfile
$onos_test/build/bin/check-e2sub-endpoints <$tmpfile

kubectl run onos-cli -n micro-onos --rm -i --image onosproject/onos-cli:latest --restart Never --command /usr/local/bin/onos e2sub list subscriptions > $tmpfile
cat $tmpfile
$onos_test/build/bin/check-e2sub-subscriptions 'onos-pci|onos-kpimon-v2' <$tmpfile

kubectl run onos-cli -n micro-onos --rm -i --image onosproject/onos-cli:latest --restart Never --command /usr/local/bin/onos pci listall pci > $tmpfile
cat $tmpfile
$onos_test/build/bin/check-pci-listall-pci <$tmpfile

kubectl run onos-cli -n micro-onos --rm -i --image onosproject/onos-cli:latest --restart Never --command /usr/local/bin/onos pci listall metric > $tmpfile
cat $tmpfile
$onos_test/build/bin/check-pci-listall-metric <$tmpfile

kubectl run onos-cli -n micro-onos --rm -i --image onosproject/onos-cli:latest --restart Never --command /usr/local/bin/onos pci listall neighbors > $tmpfile
cat $tmpfile
$onos_test/build/bin/check-pci-listall-neighbors <$tmpfile

rm $tmpfile

if [ "$#" -eq 0 ]; then
  popd
fi

echo "ONOS PCI Smoke test completed successfully!"
