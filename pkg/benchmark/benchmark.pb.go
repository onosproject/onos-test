// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: benchmark/benchmark.proto

package benchmark

import (
	context "context"
	fmt "fmt"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	_ "github.com/gogo/protobuf/types"
	github_com_gogo_protobuf_types "github.com/gogo/protobuf/types"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
	time "time"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf
var _ = time.Kitchen

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// SuiteRequest is a benchmark suite request
type SuiteRequest struct {
	// suite is the benchmark suite
	Suite string `protobuf:"bytes,1,opt,name=suite,proto3" json:"suite,omitempty"`
	// args is the benchmark arguments
	Args map[string]string `protobuf:"bytes,2,rep,name=args,proto3" json:"args,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (m *SuiteRequest) Reset()         { *m = SuiteRequest{} }
func (m *SuiteRequest) String() string { return proto.CompactTextString(m) }
func (*SuiteRequest) ProtoMessage()    {}
func (*SuiteRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_31dca67ba579dd0a, []int{0}
}
func (m *SuiteRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SuiteRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SuiteRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SuiteRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SuiteRequest.Merge(m, src)
}
func (m *SuiteRequest) XXX_Size() int {
	return m.Size()
}
func (m *SuiteRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_SuiteRequest.DiscardUnknown(m)
}

var xxx_messageInfo_SuiteRequest proto.InternalMessageInfo

func (m *SuiteRequest) GetSuite() string {
	if m != nil {
		return m.Suite
	}
	return ""
}

func (m *SuiteRequest) GetArgs() map[string]string {
	if m != nil {
		return m.Args
	}
	return nil
}

// SuiteResponse is a response to a SuiteRequest
type SuiteResponse struct {
}

func (m *SuiteResponse) Reset()         { *m = SuiteResponse{} }
func (m *SuiteResponse) String() string { return proto.CompactTextString(m) }
func (*SuiteResponse) ProtoMessage()    {}
func (*SuiteResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_31dca67ba579dd0a, []int{1}
}
func (m *SuiteResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SuiteResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SuiteResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SuiteResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SuiteResponse.Merge(m, src)
}
func (m *SuiteResponse) XXX_Size() int {
	return m.Size()
}
func (m *SuiteResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_SuiteResponse.DiscardUnknown(m)
}

var xxx_messageInfo_SuiteResponse proto.InternalMessageInfo

// BenchmarkRequest is a benchmark request
type BenchmarkRequest struct {
	// suite is the benchmark suite
	Suite string `protobuf:"bytes,1,opt,name=suite,proto3" json:"suite,omitempty"`
	// benchmark is the benchmark to run
	Benchmark string `protobuf:"bytes,2,opt,name=benchmark,proto3" json:"benchmark,omitempty"`
	// args is the benchmark arguments
	Args map[string]string `protobuf:"bytes,3,rep,name=args,proto3" json:"args,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (m *BenchmarkRequest) Reset()         { *m = BenchmarkRequest{} }
func (m *BenchmarkRequest) String() string { return proto.CompactTextString(m) }
func (*BenchmarkRequest) ProtoMessage()    {}
func (*BenchmarkRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_31dca67ba579dd0a, []int{2}
}
func (m *BenchmarkRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *BenchmarkRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_BenchmarkRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *BenchmarkRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BenchmarkRequest.Merge(m, src)
}
func (m *BenchmarkRequest) XXX_Size() int {
	return m.Size()
}
func (m *BenchmarkRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_BenchmarkRequest.DiscardUnknown(m)
}

var xxx_messageInfo_BenchmarkRequest proto.InternalMessageInfo

func (m *BenchmarkRequest) GetSuite() string {
	if m != nil {
		return m.Suite
	}
	return ""
}

func (m *BenchmarkRequest) GetBenchmark() string {
	if m != nil {
		return m.Benchmark
	}
	return ""
}

func (m *BenchmarkRequest) GetArgs() map[string]string {
	if m != nil {
		return m.Args
	}
	return nil
}

// BenchmarkResponse is a benchmark response
type BenchmarkResponse struct {
}

func (m *BenchmarkResponse) Reset()         { *m = BenchmarkResponse{} }
func (m *BenchmarkResponse) String() string { return proto.CompactTextString(m) }
func (*BenchmarkResponse) ProtoMessage()    {}
func (*BenchmarkResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_31dca67ba579dd0a, []int{3}
}
func (m *BenchmarkResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *BenchmarkResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_BenchmarkResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *BenchmarkResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BenchmarkResponse.Merge(m, src)
}
func (m *BenchmarkResponse) XXX_Size() int {
	return m.Size()
}
func (m *BenchmarkResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_BenchmarkResponse.DiscardUnknown(m)
}

var xxx_messageInfo_BenchmarkResponse proto.InternalMessageInfo

// RunRequest is a benchmark run request
type RunRequest struct {
	// suite is the benchmark suite
	Suite string `protobuf:"bytes,1,opt,name=suite,proto3" json:"suite,omitempty"`
	// benchmark is the benchmark to run
	Benchmark string `protobuf:"bytes,2,opt,name=benchmark,proto3" json:"benchmark,omitempty"`
	// requests is the number of requests to run
	Requests uint32 `protobuf:"varint,3,opt,name=requests,proto3" json:"requests,omitempty"`
	// duration is the duration for which to run the benchmark
	Duration *time.Duration `protobuf:"bytes,4,opt,name=duration,proto3,stdduration" json:"duration,omitempty"`
	// parallelism is the benchmark parallelism
	Parallelism uint32 `protobuf:"varint,5,opt,name=parallelism,proto3" json:"parallelism,omitempty"`
	// args is the benchmark arguments
	Args map[string]string `protobuf:"bytes,6,rep,name=args,proto3" json:"args,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// maximum allowed latency before the benchmark will fail
	MaxLatency *time.Duration `protobuf:"bytes,7,opt,name=maxLatency,proto3,stdduration" json:"maxLatency,omitempty"`
}

func (m *RunRequest) Reset()         { *m = RunRequest{} }
func (m *RunRequest) String() string { return proto.CompactTextString(m) }
func (*RunRequest) ProtoMessage()    {}
func (*RunRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_31dca67ba579dd0a, []int{4}
}
func (m *RunRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RunRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RunRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RunRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RunRequest.Merge(m, src)
}
func (m *RunRequest) XXX_Size() int {
	return m.Size()
}
func (m *RunRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_RunRequest.DiscardUnknown(m)
}

var xxx_messageInfo_RunRequest proto.InternalMessageInfo

func (m *RunRequest) GetSuite() string {
	if m != nil {
		return m.Suite
	}
	return ""
}

func (m *RunRequest) GetBenchmark() string {
	if m != nil {
		return m.Benchmark
	}
	return ""
}

func (m *RunRequest) GetRequests() uint32 {
	if m != nil {
		return m.Requests
	}
	return 0
}

func (m *RunRequest) GetDuration() *time.Duration {
	if m != nil {
		return m.Duration
	}
	return nil
}

func (m *RunRequest) GetParallelism() uint32 {
	if m != nil {
		return m.Parallelism
	}
	return 0
}

func (m *RunRequest) GetArgs() map[string]string {
	if m != nil {
		return m.Args
	}
	return nil
}

func (m *RunRequest) GetMaxLatency() *time.Duration {
	if m != nil {
		return m.MaxLatency
	}
	return nil
}

// RunResponse is a benchmark run response
type RunResponse struct {
	// suite is the benchmark suite
	Suite string `protobuf:"bytes,1,opt,name=suite,proto3" json:"suite,omitempty"`
	// benchmark is the benchmark that was run
	Benchmark string `protobuf:"bytes,2,opt,name=benchmark,proto3" json:"benchmark,omitempty"`
	// requests is the number of requests that were run
	Requests uint32 `protobuf:"varint,3,opt,name=requests,proto3" json:"requests,omitempty"`
	// duration is the duration of the test run
	Duration time.Duration `protobuf:"bytes,4,opt,name=duration,proto3,stdduration" json:"duration"`
	// latency is the mean latency
	Latency time.Duration `protobuf:"bytes,5,opt,name=latency,proto3,stdduration" json:"latency"`
	// latency* are latency percentiles
	Latency50 time.Duration `protobuf:"bytes,6,opt,name=latency50,proto3,stdduration" json:"latency50"`
	Latency75 time.Duration `protobuf:"bytes,7,opt,name=latency75,proto3,stdduration" json:"latency75"`
	Latency95 time.Duration `protobuf:"bytes,8,opt,name=latency95,proto3,stdduration" json:"latency95"`
	Latency99 time.Duration `protobuf:"bytes,9,opt,name=latency99,proto3,stdduration" json:"latency99"`
}

func (m *RunResponse) Reset()         { *m = RunResponse{} }
func (m *RunResponse) String() string { return proto.CompactTextString(m) }
func (*RunResponse) ProtoMessage()    {}
func (*RunResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_31dca67ba579dd0a, []int{5}
}
func (m *RunResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RunResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RunResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RunResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RunResponse.Merge(m, src)
}
func (m *RunResponse) XXX_Size() int {
	return m.Size()
}
func (m *RunResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_RunResponse.DiscardUnknown(m)
}

var xxx_messageInfo_RunResponse proto.InternalMessageInfo

func (m *RunResponse) GetSuite() string {
	if m != nil {
		return m.Suite
	}
	return ""
}

func (m *RunResponse) GetBenchmark() string {
	if m != nil {
		return m.Benchmark
	}
	return ""
}

func (m *RunResponse) GetRequests() uint32 {
	if m != nil {
		return m.Requests
	}
	return 0
}

func (m *RunResponse) GetDuration() time.Duration {
	if m != nil {
		return m.Duration
	}
	return 0
}

func (m *RunResponse) GetLatency() time.Duration {
	if m != nil {
		return m.Latency
	}
	return 0
}

func (m *RunResponse) GetLatency50() time.Duration {
	if m != nil {
		return m.Latency50
	}
	return 0
}

func (m *RunResponse) GetLatency75() time.Duration {
	if m != nil {
		return m.Latency75
	}
	return 0
}

func (m *RunResponse) GetLatency95() time.Duration {
	if m != nil {
		return m.Latency95
	}
	return 0
}

func (m *RunResponse) GetLatency99() time.Duration {
	if m != nil {
		return m.Latency99
	}
	return 0
}

func init() {
	proto.RegisterType((*SuiteRequest)(nil), "onos.test.benchmark.SuiteRequest")
	proto.RegisterMapType((map[string]string)(nil), "onos.test.benchmark.SuiteRequest.ArgsEntry")
	proto.RegisterType((*SuiteResponse)(nil), "onos.test.benchmark.SuiteResponse")
	proto.RegisterType((*BenchmarkRequest)(nil), "onos.test.benchmark.BenchmarkRequest")
	proto.RegisterMapType((map[string]string)(nil), "onos.test.benchmark.BenchmarkRequest.ArgsEntry")
	proto.RegisterType((*BenchmarkResponse)(nil), "onos.test.benchmark.BenchmarkResponse")
	proto.RegisterType((*RunRequest)(nil), "onos.test.benchmark.RunRequest")
	proto.RegisterMapType((map[string]string)(nil), "onos.test.benchmark.RunRequest.ArgsEntry")
	proto.RegisterType((*RunResponse)(nil), "onos.test.benchmark.RunResponse")
}

func init() { proto.RegisterFile("benchmark/benchmark.proto", fileDescriptor_31dca67ba579dd0a) }

var fileDescriptor_31dca67ba579dd0a = []byte{
	// 583 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xb4, 0x94, 0xcf, 0x6f, 0x12, 0x41,
	0x14, 0xc7, 0x19, 0x7e, 0x15, 0x1e, 0xa5, 0xb6, 0xd3, 0x1e, 0xa6, 0x1b, 0xb3, 0x20, 0x89, 0x06,
	0x63, 0xb2, 0x18, 0x0c, 0x41, 0x34, 0x0d, 0x29, 0xd6, 0x9b, 0x17, 0x97, 0xc6, 0x1e, 0xcd, 0x82,
	0xe3, 0x4a, 0x58, 0x76, 0x70, 0x76, 0xb7, 0xca, 0xd9, 0x7f, 0xc0, 0xa3, 0x27, 0xff, 0x1a, 0x0f,
	0x3d, 0xf6, 0xe8, 0x49, 0x0d, 0x9c, 0xbc, 0xfb, 0x07, 0x18, 0x66, 0x67, 0x97, 0x15, 0xb1, 0xd0,
	0x4a, 0x6f, 0xf3, 0xe3, 0xbd, 0xcf, 0xfb, 0x7e, 0xdf, 0x4c, 0x1e, 0xec, 0x77, 0xa8, 0xdd, 0x7d,
	0x33, 0x30, 0x78, 0xbf, 0x12, 0xae, 0xb4, 0x21, 0x67, 0x2e, 0xc3, 0xbb, 0xcc, 0x66, 0x8e, 0xe6,
	0x52, 0xc7, 0xd5, 0xc2, 0x2b, 0x65, 0xcf, 0x64, 0x26, 0x13, 0xf7, 0x95, 0xe9, 0xca, 0x0f, 0x55,
	0x54, 0x93, 0x31, 0xd3, 0xa2, 0x15, 0xb1, 0xeb, 0x78, 0xaf, 0x2b, 0xaf, 0x3c, 0x6e, 0xb8, 0x3d,
	0x66, 0xfb, 0xf7, 0xa5, 0xcf, 0x08, 0x36, 0xdb, 0x5e, 0xcf, 0xa5, 0x3a, 0x7d, 0xeb, 0x51, 0xc7,
	0xc5, 0x7b, 0x90, 0x72, 0xa6, 0x7b, 0x82, 0x8a, 0xa8, 0x9c, 0xd5, 0xfd, 0x0d, 0x6e, 0x42, 0xd2,
	0xe0, 0xa6, 0x43, 0xe2, 0xc5, 0x44, 0x39, 0x57, 0xbd, 0xa7, 0x2d, 0x10, 0xa0, 0x45, 0x31, 0xda,
	0x21, 0x37, 0x9d, 0xa7, 0xb6, 0xcb, 0x47, 0xba, 0x48, 0x54, 0xea, 0x90, 0x0d, 0x8f, 0xf0, 0x36,
	0x24, 0xfa, 0x74, 0x24, 0x2b, 0x4c, 0x97, 0xd3, 0xaa, 0xa7, 0x86, 0xe5, 0x51, 0x12, 0xf7, 0xab,
	0x8a, 0xcd, 0xa3, 0xf8, 0x43, 0x54, 0xba, 0x01, 0x79, 0x09, 0x76, 0x86, 0xcc, 0x76, 0x68, 0xe9,
	0x0b, 0x82, 0xed, 0x56, 0x50, 0xf4, 0x62, 0xd5, 0x37, 0x21, 0x1b, 0xca, 0x93, 0xe4, 0xd9, 0x01,
	0x7e, 0x22, 0x3d, 0x25, 0x84, 0xa7, 0xca, 0x42, 0x4f, 0xf3, 0x85, 0xd6, 0xe7, 0x6b, 0x17, 0x76,
	0x22, 0x70, 0xe9, 0xed, 0x57, 0x1c, 0x40, 0xf7, 0xec, 0xff, 0x71, 0xa5, 0x40, 0x86, 0xfb, 0xe9,
	0x53, 0x67, 0xa8, 0x9c, 0xd7, 0xc3, 0x3d, 0x7e, 0x0c, 0x99, 0xe0, 0xf9, 0x49, 0xb2, 0x88, 0xca,
	0xb9, 0xea, 0xbe, 0xe6, 0xff, 0x0f, 0x2d, 0xf8, 0x1f, 0xda, 0x91, 0x0c, 0x68, 0x25, 0x3f, 0x7d,
	0x2f, 0x20, 0x3d, 0x4c, 0xc0, 0x45, 0xc8, 0x0d, 0x0d, 0x6e, 0x58, 0x16, 0xb5, 0x7a, 0xce, 0x80,
	0xa4, 0x04, 0x3b, 0x7a, 0x84, 0x0f, 0x64, 0x43, 0xd3, 0xa2, 0xa1, 0x77, 0x17, 0x36, 0x74, 0xe6,
	0x6e, 0xbe, 0x95, 0xb8, 0x09, 0x30, 0x30, 0xde, 0x3f, 0x33, 0x5c, 0x6a, 0x77, 0x47, 0x64, 0x63,
	0x35, 0x7d, 0x91, 0x94, 0xab, 0xbf, 0xc5, 0xcf, 0x04, 0xe4, 0x84, 0x30, 0xff, 0x19, 0xd6, 0xde,
	0xf7, 0xe6, 0x65, 0xfa, 0x9e, 0x39, 0xfb, 0x56, 0x88, 0xcd, 0xf5, 0xfe, 0x00, 0x36, 0x2c, 0xd9,
	0x97, 0xd4, 0xea, 0xf9, 0x41, 0x0e, 0x3e, 0x84, 0xac, 0x5c, 0xd6, 0xee, 0x93, 0xf4, 0xea, 0x80,
	0x59, 0x56, 0x04, 0x51, 0xaf, 0x2d, 0x7f, 0x9b, 0xbf, 0x11, 0xf5, 0x5a, 0x04, 0xd1, 0xa8, 0x91,
	0xcc, 0xe5, 0x11, 0x8d, 0x3f, 0x10, 0x0d, 0x92, 0xbd, 0x02, 0xa2, 0x51, 0xfd, 0x90, 0x82, 0xfc,
	0x09, 0xe3, 0x7d, 0xca, 0xdb, 0x94, 0x9f, 0xf6, 0xba, 0x14, 0xb7, 0x01, 0xda, 0xd4, 0xf5, 0x86,
	0x62, 0xcc, 0xe0, 0x5b, 0x4b, 0x67, 0x9b, 0x52, 0xba, 0x28, 0x44, 0x7e, 0xa1, 0x17, 0x90, 0x3f,
	0xa6, 0x06, 0x3f, 0x62, 0xef, 0xec, 0xb5, 0x72, 0x8f, 0x21, 0x27, 0xc4, 0xfa, 0x16, 0xd6, 0x45,
	0x3d, 0x81, 0xad, 0x40, 0xed, 0x7a, 0xc1, 0x2f, 0x61, 0x4b, 0xc8, 0x0d, 0x47, 0x1d, 0xbe, 0xbd,
	0xd2, 0x9c, 0x55, 0xee, 0x2c, 0x0b, 0x93, 0x05, 0x3a, 0xb0, 0x13, 0x28, 0xbf, 0xb6, 0x1a, 0xcf,
	0x61, 0x53, 0xf7, 0x22, 0xf8, 0xc2, 0x92, 0xc9, 0xa6, 0x14, 0xff, 0x1d, 0xe0, 0x23, 0x5b, 0xe4,
	0x6c, 0xac, 0xa2, 0xf3, 0xb1, 0x8a, 0x7e, 0x8c, 0x55, 0xf4, 0x71, 0xa2, 0xc6, 0xce, 0x27, 0x6a,
	0xec, 0xeb, 0x44, 0x8d, 0x75, 0xd2, 0xe2, 0x1f, 0x3f, 0xf8, 0x1d, 0x00, 0x00, 0xff, 0xff, 0x55,
	0xc1, 0x30, 0x17, 0xff, 0x07, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// WorkerServiceClient is the client API for WorkerService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type WorkerServiceClient interface {
	SetupSuite(ctx context.Context, in *SuiteRequest, opts ...grpc.CallOption) (*SuiteResponse, error)
	TearDownSuite(ctx context.Context, in *SuiteRequest, opts ...grpc.CallOption) (*SuiteResponse, error)
	SetupWorker(ctx context.Context, in *SuiteRequest, opts ...grpc.CallOption) (*SuiteResponse, error)
	TearDownWorker(ctx context.Context, in *SuiteRequest, opts ...grpc.CallOption) (*SuiteResponse, error)
	SetupBenchmark(ctx context.Context, in *BenchmarkRequest, opts ...grpc.CallOption) (*BenchmarkResponse, error)
	TearDownBenchmark(ctx context.Context, in *BenchmarkRequest, opts ...grpc.CallOption) (*BenchmarkResponse, error)
	RunBenchmark(ctx context.Context, in *RunRequest, opts ...grpc.CallOption) (*RunResponse, error)
}

type workerServiceClient struct {
	cc *grpc.ClientConn
}

func NewWorkerServiceClient(cc *grpc.ClientConn) WorkerServiceClient {
	return &workerServiceClient{cc}
}

func (c *workerServiceClient) SetupSuite(ctx context.Context, in *SuiteRequest, opts ...grpc.CallOption) (*SuiteResponse, error) {
	out := new(SuiteResponse)
	err := c.cc.Invoke(ctx, "/onos.test.benchmark.WorkerService/SetupSuite", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *workerServiceClient) TearDownSuite(ctx context.Context, in *SuiteRequest, opts ...grpc.CallOption) (*SuiteResponse, error) {
	out := new(SuiteResponse)
	err := c.cc.Invoke(ctx, "/onos.test.benchmark.WorkerService/TearDownSuite", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *workerServiceClient) SetupWorker(ctx context.Context, in *SuiteRequest, opts ...grpc.CallOption) (*SuiteResponse, error) {
	out := new(SuiteResponse)
	err := c.cc.Invoke(ctx, "/onos.test.benchmark.WorkerService/SetupWorker", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *workerServiceClient) TearDownWorker(ctx context.Context, in *SuiteRequest, opts ...grpc.CallOption) (*SuiteResponse, error) {
	out := new(SuiteResponse)
	err := c.cc.Invoke(ctx, "/onos.test.benchmark.WorkerService/TearDownWorker", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *workerServiceClient) SetupBenchmark(ctx context.Context, in *BenchmarkRequest, opts ...grpc.CallOption) (*BenchmarkResponse, error) {
	out := new(BenchmarkResponse)
	err := c.cc.Invoke(ctx, "/onos.test.benchmark.WorkerService/SetupBenchmark", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *workerServiceClient) TearDownBenchmark(ctx context.Context, in *BenchmarkRequest, opts ...grpc.CallOption) (*BenchmarkResponse, error) {
	out := new(BenchmarkResponse)
	err := c.cc.Invoke(ctx, "/onos.test.benchmark.WorkerService/TearDownBenchmark", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *workerServiceClient) RunBenchmark(ctx context.Context, in *RunRequest, opts ...grpc.CallOption) (*RunResponse, error) {
	out := new(RunResponse)
	err := c.cc.Invoke(ctx, "/onos.test.benchmark.WorkerService/RunBenchmark", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// WorkerServiceServer is the server API for WorkerService service.
type WorkerServiceServer interface {
	SetupSuite(context.Context, *SuiteRequest) (*SuiteResponse, error)
	TearDownSuite(context.Context, *SuiteRequest) (*SuiteResponse, error)
	SetupWorker(context.Context, *SuiteRequest) (*SuiteResponse, error)
	TearDownWorker(context.Context, *SuiteRequest) (*SuiteResponse, error)
	SetupBenchmark(context.Context, *BenchmarkRequest) (*BenchmarkResponse, error)
	TearDownBenchmark(context.Context, *BenchmarkRequest) (*BenchmarkResponse, error)
	RunBenchmark(context.Context, *RunRequest) (*RunResponse, error)
}

// UnimplementedWorkerServiceServer can be embedded to have forward compatible implementations.
type UnimplementedWorkerServiceServer struct {
}

func (*UnimplementedWorkerServiceServer) SetupSuite(ctx context.Context, req *SuiteRequest) (*SuiteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetupSuite not implemented")
}
func (*UnimplementedWorkerServiceServer) TearDownSuite(ctx context.Context, req *SuiteRequest) (*SuiteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TearDownSuite not implemented")
}
func (*UnimplementedWorkerServiceServer) SetupWorker(ctx context.Context, req *SuiteRequest) (*SuiteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetupWorker not implemented")
}
func (*UnimplementedWorkerServiceServer) TearDownWorker(ctx context.Context, req *SuiteRequest) (*SuiteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TearDownWorker not implemented")
}
func (*UnimplementedWorkerServiceServer) SetupBenchmark(ctx context.Context, req *BenchmarkRequest) (*BenchmarkResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetupBenchmark not implemented")
}
func (*UnimplementedWorkerServiceServer) TearDownBenchmark(ctx context.Context, req *BenchmarkRequest) (*BenchmarkResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TearDownBenchmark not implemented")
}
func (*UnimplementedWorkerServiceServer) RunBenchmark(ctx context.Context, req *RunRequest) (*RunResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RunBenchmark not implemented")
}

func RegisterWorkerServiceServer(s *grpc.Server, srv WorkerServiceServer) {
	s.RegisterService(&_WorkerService_serviceDesc, srv)
}

func _WorkerService_SetupSuite_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SuiteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WorkerServiceServer).SetupSuite(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/onos.test.benchmark.WorkerService/SetupSuite",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WorkerServiceServer).SetupSuite(ctx, req.(*SuiteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WorkerService_TearDownSuite_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SuiteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WorkerServiceServer).TearDownSuite(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/onos.test.benchmark.WorkerService/TearDownSuite",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WorkerServiceServer).TearDownSuite(ctx, req.(*SuiteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WorkerService_SetupWorker_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SuiteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WorkerServiceServer).SetupWorker(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/onos.test.benchmark.WorkerService/SetupWorker",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WorkerServiceServer).SetupWorker(ctx, req.(*SuiteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WorkerService_TearDownWorker_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SuiteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WorkerServiceServer).TearDownWorker(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/onos.test.benchmark.WorkerService/TearDownWorker",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WorkerServiceServer).TearDownWorker(ctx, req.(*SuiteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WorkerService_SetupBenchmark_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BenchmarkRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WorkerServiceServer).SetupBenchmark(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/onos.test.benchmark.WorkerService/SetupBenchmark",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WorkerServiceServer).SetupBenchmark(ctx, req.(*BenchmarkRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WorkerService_TearDownBenchmark_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BenchmarkRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WorkerServiceServer).TearDownBenchmark(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/onos.test.benchmark.WorkerService/TearDownBenchmark",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WorkerServiceServer).TearDownBenchmark(ctx, req.(*BenchmarkRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WorkerService_RunBenchmark_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RunRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WorkerServiceServer).RunBenchmark(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/onos.test.benchmark.WorkerService/RunBenchmark",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WorkerServiceServer).RunBenchmark(ctx, req.(*RunRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _WorkerService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "onos.test.benchmark.WorkerService",
	HandlerType: (*WorkerServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SetupSuite",
			Handler:    _WorkerService_SetupSuite_Handler,
		},
		{
			MethodName: "TearDownSuite",
			Handler:    _WorkerService_TearDownSuite_Handler,
		},
		{
			MethodName: "SetupWorker",
			Handler:    _WorkerService_SetupWorker_Handler,
		},
		{
			MethodName: "TearDownWorker",
			Handler:    _WorkerService_TearDownWorker_Handler,
		},
		{
			MethodName: "SetupBenchmark",
			Handler:    _WorkerService_SetupBenchmark_Handler,
		},
		{
			MethodName: "TearDownBenchmark",
			Handler:    _WorkerService_TearDownBenchmark_Handler,
		},
		{
			MethodName: "RunBenchmark",
			Handler:    _WorkerService_RunBenchmark_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "benchmark/benchmark.proto",
}

func (m *SuiteRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SuiteRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SuiteRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Args) > 0 {
		for k := range m.Args {
			v := m.Args[k]
			baseI := i
			i -= len(v)
			copy(dAtA[i:], v)
			i = encodeVarintBenchmark(dAtA, i, uint64(len(v)))
			i--
			dAtA[i] = 0x12
			i -= len(k)
			copy(dAtA[i:], k)
			i = encodeVarintBenchmark(dAtA, i, uint64(len(k)))
			i--
			dAtA[i] = 0xa
			i = encodeVarintBenchmark(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.Suite) > 0 {
		i -= len(m.Suite)
		copy(dAtA[i:], m.Suite)
		i = encodeVarintBenchmark(dAtA, i, uint64(len(m.Suite)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *SuiteResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SuiteResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SuiteResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *BenchmarkRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BenchmarkRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *BenchmarkRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Args) > 0 {
		for k := range m.Args {
			v := m.Args[k]
			baseI := i
			i -= len(v)
			copy(dAtA[i:], v)
			i = encodeVarintBenchmark(dAtA, i, uint64(len(v)))
			i--
			dAtA[i] = 0x12
			i -= len(k)
			copy(dAtA[i:], k)
			i = encodeVarintBenchmark(dAtA, i, uint64(len(k)))
			i--
			dAtA[i] = 0xa
			i = encodeVarintBenchmark(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0x1a
		}
	}
	if len(m.Benchmark) > 0 {
		i -= len(m.Benchmark)
		copy(dAtA[i:], m.Benchmark)
		i = encodeVarintBenchmark(dAtA, i, uint64(len(m.Benchmark)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Suite) > 0 {
		i -= len(m.Suite)
		copy(dAtA[i:], m.Suite)
		i = encodeVarintBenchmark(dAtA, i, uint64(len(m.Suite)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *BenchmarkResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BenchmarkResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *BenchmarkResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *RunRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RunRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RunRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.MaxLatency != nil {
		n1, err1 := github_com_gogo_protobuf_types.StdDurationMarshalTo(*m.MaxLatency, dAtA[i-github_com_gogo_protobuf_types.SizeOfStdDuration(*m.MaxLatency):])
		if err1 != nil {
			return 0, err1
		}
		i -= n1
		i = encodeVarintBenchmark(dAtA, i, uint64(n1))
		i--
		dAtA[i] = 0x3a
	}
	if len(m.Args) > 0 {
		for k := range m.Args {
			v := m.Args[k]
			baseI := i
			i -= len(v)
			copy(dAtA[i:], v)
			i = encodeVarintBenchmark(dAtA, i, uint64(len(v)))
			i--
			dAtA[i] = 0x12
			i -= len(k)
			copy(dAtA[i:], k)
			i = encodeVarintBenchmark(dAtA, i, uint64(len(k)))
			i--
			dAtA[i] = 0xa
			i = encodeVarintBenchmark(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0x32
		}
	}
	if m.Parallelism != 0 {
		i = encodeVarintBenchmark(dAtA, i, uint64(m.Parallelism))
		i--
		dAtA[i] = 0x28
	}
	if m.Duration != nil {
		n2, err2 := github_com_gogo_protobuf_types.StdDurationMarshalTo(*m.Duration, dAtA[i-github_com_gogo_protobuf_types.SizeOfStdDuration(*m.Duration):])
		if err2 != nil {
			return 0, err2
		}
		i -= n2
		i = encodeVarintBenchmark(dAtA, i, uint64(n2))
		i--
		dAtA[i] = 0x22
	}
	if m.Requests != 0 {
		i = encodeVarintBenchmark(dAtA, i, uint64(m.Requests))
		i--
		dAtA[i] = 0x18
	}
	if len(m.Benchmark) > 0 {
		i -= len(m.Benchmark)
		copy(dAtA[i:], m.Benchmark)
		i = encodeVarintBenchmark(dAtA, i, uint64(len(m.Benchmark)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Suite) > 0 {
		i -= len(m.Suite)
		copy(dAtA[i:], m.Suite)
		i = encodeVarintBenchmark(dAtA, i, uint64(len(m.Suite)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *RunResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RunResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RunResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	n3, err3 := github_com_gogo_protobuf_types.StdDurationMarshalTo(m.Latency99, dAtA[i-github_com_gogo_protobuf_types.SizeOfStdDuration(m.Latency99):])
	if err3 != nil {
		return 0, err3
	}
	i -= n3
	i = encodeVarintBenchmark(dAtA, i, uint64(n3))
	i--
	dAtA[i] = 0x4a
	n4, err4 := github_com_gogo_protobuf_types.StdDurationMarshalTo(m.Latency95, dAtA[i-github_com_gogo_protobuf_types.SizeOfStdDuration(m.Latency95):])
	if err4 != nil {
		return 0, err4
	}
	i -= n4
	i = encodeVarintBenchmark(dAtA, i, uint64(n4))
	i--
	dAtA[i] = 0x42
	n5, err5 := github_com_gogo_protobuf_types.StdDurationMarshalTo(m.Latency75, dAtA[i-github_com_gogo_protobuf_types.SizeOfStdDuration(m.Latency75):])
	if err5 != nil {
		return 0, err5
	}
	i -= n5
	i = encodeVarintBenchmark(dAtA, i, uint64(n5))
	i--
	dAtA[i] = 0x3a
	n6, err6 := github_com_gogo_protobuf_types.StdDurationMarshalTo(m.Latency50, dAtA[i-github_com_gogo_protobuf_types.SizeOfStdDuration(m.Latency50):])
	if err6 != nil {
		return 0, err6
	}
	i -= n6
	i = encodeVarintBenchmark(dAtA, i, uint64(n6))
	i--
	dAtA[i] = 0x32
	n7, err7 := github_com_gogo_protobuf_types.StdDurationMarshalTo(m.Latency, dAtA[i-github_com_gogo_protobuf_types.SizeOfStdDuration(m.Latency):])
	if err7 != nil {
		return 0, err7
	}
	i -= n7
	i = encodeVarintBenchmark(dAtA, i, uint64(n7))
	i--
	dAtA[i] = 0x2a
	n8, err8 := github_com_gogo_protobuf_types.StdDurationMarshalTo(m.Duration, dAtA[i-github_com_gogo_protobuf_types.SizeOfStdDuration(m.Duration):])
	if err8 != nil {
		return 0, err8
	}
	i -= n8
	i = encodeVarintBenchmark(dAtA, i, uint64(n8))
	i--
	dAtA[i] = 0x22
	if m.Requests != 0 {
		i = encodeVarintBenchmark(dAtA, i, uint64(m.Requests))
		i--
		dAtA[i] = 0x18
	}
	if len(m.Benchmark) > 0 {
		i -= len(m.Benchmark)
		copy(dAtA[i:], m.Benchmark)
		i = encodeVarintBenchmark(dAtA, i, uint64(len(m.Benchmark)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Suite) > 0 {
		i -= len(m.Suite)
		copy(dAtA[i:], m.Suite)
		i = encodeVarintBenchmark(dAtA, i, uint64(len(m.Suite)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintBenchmark(dAtA []byte, offset int, v uint64) int {
	offset -= sovBenchmark(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *SuiteRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Suite)
	if l > 0 {
		n += 1 + l + sovBenchmark(uint64(l))
	}
	if len(m.Args) > 0 {
		for k, v := range m.Args {
			_ = k
			_ = v
			mapEntrySize := 1 + len(k) + sovBenchmark(uint64(len(k))) + 1 + len(v) + sovBenchmark(uint64(len(v)))
			n += mapEntrySize + 1 + sovBenchmark(uint64(mapEntrySize))
		}
	}
	return n
}

func (m *SuiteResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *BenchmarkRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Suite)
	if l > 0 {
		n += 1 + l + sovBenchmark(uint64(l))
	}
	l = len(m.Benchmark)
	if l > 0 {
		n += 1 + l + sovBenchmark(uint64(l))
	}
	if len(m.Args) > 0 {
		for k, v := range m.Args {
			_ = k
			_ = v
			mapEntrySize := 1 + len(k) + sovBenchmark(uint64(len(k))) + 1 + len(v) + sovBenchmark(uint64(len(v)))
			n += mapEntrySize + 1 + sovBenchmark(uint64(mapEntrySize))
		}
	}
	return n
}

func (m *BenchmarkResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *RunRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Suite)
	if l > 0 {
		n += 1 + l + sovBenchmark(uint64(l))
	}
	l = len(m.Benchmark)
	if l > 0 {
		n += 1 + l + sovBenchmark(uint64(l))
	}
	if m.Requests != 0 {
		n += 1 + sovBenchmark(uint64(m.Requests))
	}
	if m.Duration != nil {
		l = github_com_gogo_protobuf_types.SizeOfStdDuration(*m.Duration)
		n += 1 + l + sovBenchmark(uint64(l))
	}
	if m.Parallelism != 0 {
		n += 1 + sovBenchmark(uint64(m.Parallelism))
	}
	if len(m.Args) > 0 {
		for k, v := range m.Args {
			_ = k
			_ = v
			mapEntrySize := 1 + len(k) + sovBenchmark(uint64(len(k))) + 1 + len(v) + sovBenchmark(uint64(len(v)))
			n += mapEntrySize + 1 + sovBenchmark(uint64(mapEntrySize))
		}
	}
	if m.MaxLatency != nil {
		l = github_com_gogo_protobuf_types.SizeOfStdDuration(*m.MaxLatency)
		n += 1 + l + sovBenchmark(uint64(l))
	}
	return n
}

func (m *RunResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Suite)
	if l > 0 {
		n += 1 + l + sovBenchmark(uint64(l))
	}
	l = len(m.Benchmark)
	if l > 0 {
		n += 1 + l + sovBenchmark(uint64(l))
	}
	if m.Requests != 0 {
		n += 1 + sovBenchmark(uint64(m.Requests))
	}
	l = github_com_gogo_protobuf_types.SizeOfStdDuration(m.Duration)
	n += 1 + l + sovBenchmark(uint64(l))
	l = github_com_gogo_protobuf_types.SizeOfStdDuration(m.Latency)
	n += 1 + l + sovBenchmark(uint64(l))
	l = github_com_gogo_protobuf_types.SizeOfStdDuration(m.Latency50)
	n += 1 + l + sovBenchmark(uint64(l))
	l = github_com_gogo_protobuf_types.SizeOfStdDuration(m.Latency75)
	n += 1 + l + sovBenchmark(uint64(l))
	l = github_com_gogo_protobuf_types.SizeOfStdDuration(m.Latency95)
	n += 1 + l + sovBenchmark(uint64(l))
	l = github_com_gogo_protobuf_types.SizeOfStdDuration(m.Latency99)
	n += 1 + l + sovBenchmark(uint64(l))
	return n
}

func sovBenchmark(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozBenchmark(x uint64) (n int) {
	return sovBenchmark(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *SuiteRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBenchmark
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SuiteRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SuiteRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Suite", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBenchmark
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBenchmark
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBenchmark
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Suite = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Args", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBenchmark
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBenchmark
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthBenchmark
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Args == nil {
				m.Args = make(map[string]string)
			}
			var mapkey string
			var mapvalue string
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowBenchmark
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					var stringLenmapkey uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowBenchmark
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapkey |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapkey := int(stringLenmapkey)
					if intStringLenmapkey < 0 {
						return ErrInvalidLengthBenchmark
					}
					postStringIndexmapkey := iNdEx + intStringLenmapkey
					if postStringIndexmapkey < 0 {
						return ErrInvalidLengthBenchmark
					}
					if postStringIndexmapkey > l {
						return io.ErrUnexpectedEOF
					}
					mapkey = string(dAtA[iNdEx:postStringIndexmapkey])
					iNdEx = postStringIndexmapkey
				} else if fieldNum == 2 {
					var stringLenmapvalue uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowBenchmark
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapvalue |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapvalue := int(stringLenmapvalue)
					if intStringLenmapvalue < 0 {
						return ErrInvalidLengthBenchmark
					}
					postStringIndexmapvalue := iNdEx + intStringLenmapvalue
					if postStringIndexmapvalue < 0 {
						return ErrInvalidLengthBenchmark
					}
					if postStringIndexmapvalue > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = string(dAtA[iNdEx:postStringIndexmapvalue])
					iNdEx = postStringIndexmapvalue
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipBenchmark(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if skippy < 0 {
						return ErrInvalidLengthBenchmark
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.Args[mapkey] = mapvalue
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipBenchmark(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthBenchmark
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthBenchmark
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SuiteResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBenchmark
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SuiteResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SuiteResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipBenchmark(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthBenchmark
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthBenchmark
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *BenchmarkRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBenchmark
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BenchmarkRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BenchmarkRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Suite", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBenchmark
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBenchmark
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBenchmark
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Suite = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Benchmark", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBenchmark
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBenchmark
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBenchmark
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Benchmark = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Args", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBenchmark
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBenchmark
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthBenchmark
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Args == nil {
				m.Args = make(map[string]string)
			}
			var mapkey string
			var mapvalue string
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowBenchmark
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					var stringLenmapkey uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowBenchmark
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapkey |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapkey := int(stringLenmapkey)
					if intStringLenmapkey < 0 {
						return ErrInvalidLengthBenchmark
					}
					postStringIndexmapkey := iNdEx + intStringLenmapkey
					if postStringIndexmapkey < 0 {
						return ErrInvalidLengthBenchmark
					}
					if postStringIndexmapkey > l {
						return io.ErrUnexpectedEOF
					}
					mapkey = string(dAtA[iNdEx:postStringIndexmapkey])
					iNdEx = postStringIndexmapkey
				} else if fieldNum == 2 {
					var stringLenmapvalue uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowBenchmark
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapvalue |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapvalue := int(stringLenmapvalue)
					if intStringLenmapvalue < 0 {
						return ErrInvalidLengthBenchmark
					}
					postStringIndexmapvalue := iNdEx + intStringLenmapvalue
					if postStringIndexmapvalue < 0 {
						return ErrInvalidLengthBenchmark
					}
					if postStringIndexmapvalue > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = string(dAtA[iNdEx:postStringIndexmapvalue])
					iNdEx = postStringIndexmapvalue
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipBenchmark(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if skippy < 0 {
						return ErrInvalidLengthBenchmark
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.Args[mapkey] = mapvalue
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipBenchmark(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthBenchmark
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthBenchmark
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *BenchmarkResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBenchmark
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BenchmarkResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BenchmarkResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipBenchmark(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthBenchmark
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthBenchmark
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RunRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBenchmark
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RunRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RunRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Suite", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBenchmark
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBenchmark
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBenchmark
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Suite = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Benchmark", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBenchmark
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBenchmark
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBenchmark
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Benchmark = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Requests", wireType)
			}
			m.Requests = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBenchmark
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Requests |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Duration", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBenchmark
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBenchmark
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthBenchmark
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Duration == nil {
				m.Duration = new(time.Duration)
			}
			if err := github_com_gogo_protobuf_types.StdDurationUnmarshal(m.Duration, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Parallelism", wireType)
			}
			m.Parallelism = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBenchmark
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Parallelism |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Args", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBenchmark
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBenchmark
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthBenchmark
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Args == nil {
				m.Args = make(map[string]string)
			}
			var mapkey string
			var mapvalue string
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowBenchmark
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					var stringLenmapkey uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowBenchmark
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapkey |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapkey := int(stringLenmapkey)
					if intStringLenmapkey < 0 {
						return ErrInvalidLengthBenchmark
					}
					postStringIndexmapkey := iNdEx + intStringLenmapkey
					if postStringIndexmapkey < 0 {
						return ErrInvalidLengthBenchmark
					}
					if postStringIndexmapkey > l {
						return io.ErrUnexpectedEOF
					}
					mapkey = string(dAtA[iNdEx:postStringIndexmapkey])
					iNdEx = postStringIndexmapkey
				} else if fieldNum == 2 {
					var stringLenmapvalue uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowBenchmark
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapvalue |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapvalue := int(stringLenmapvalue)
					if intStringLenmapvalue < 0 {
						return ErrInvalidLengthBenchmark
					}
					postStringIndexmapvalue := iNdEx + intStringLenmapvalue
					if postStringIndexmapvalue < 0 {
						return ErrInvalidLengthBenchmark
					}
					if postStringIndexmapvalue > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = string(dAtA[iNdEx:postStringIndexmapvalue])
					iNdEx = postStringIndexmapvalue
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipBenchmark(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if skippy < 0 {
						return ErrInvalidLengthBenchmark
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.Args[mapkey] = mapvalue
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaxLatency", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBenchmark
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBenchmark
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthBenchmark
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.MaxLatency == nil {
				m.MaxLatency = new(time.Duration)
			}
			if err := github_com_gogo_protobuf_types.StdDurationUnmarshal(m.MaxLatency, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipBenchmark(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthBenchmark
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthBenchmark
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RunResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBenchmark
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RunResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RunResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Suite", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBenchmark
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBenchmark
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBenchmark
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Suite = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Benchmark", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBenchmark
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBenchmark
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBenchmark
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Benchmark = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Requests", wireType)
			}
			m.Requests = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBenchmark
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Requests |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Duration", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBenchmark
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBenchmark
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthBenchmark
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := github_com_gogo_protobuf_types.StdDurationUnmarshal(&m.Duration, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Latency", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBenchmark
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBenchmark
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthBenchmark
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := github_com_gogo_protobuf_types.StdDurationUnmarshal(&m.Latency, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Latency50", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBenchmark
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBenchmark
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthBenchmark
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := github_com_gogo_protobuf_types.StdDurationUnmarshal(&m.Latency50, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Latency75", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBenchmark
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBenchmark
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthBenchmark
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := github_com_gogo_protobuf_types.StdDurationUnmarshal(&m.Latency75, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Latency95", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBenchmark
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBenchmark
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthBenchmark
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := github_com_gogo_protobuf_types.StdDurationUnmarshal(&m.Latency95, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Latency99", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBenchmark
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBenchmark
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthBenchmark
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := github_com_gogo_protobuf_types.StdDurationUnmarshal(&m.Latency99, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipBenchmark(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthBenchmark
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthBenchmark
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipBenchmark(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowBenchmark
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowBenchmark
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowBenchmark
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthBenchmark
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupBenchmark
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthBenchmark
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthBenchmark        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowBenchmark          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupBenchmark = fmt.Errorf("proto: unexpected end of group")
)
